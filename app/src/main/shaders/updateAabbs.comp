#version 450
layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in;

struct RigidBodyData
{
    vec4 pos;//_m0;
    vec4 quat;//_m1;
    vec4 linVal;//_m2;
    vec4 argVal;
    ivec4 cilf;//collidableIdx_InvariantIdx_localAabbIdx_frictionCoeff;
};

struct Invariant
{
    vec4 invMass_restituitionCoeff_frictionCoeff;//collidableIdx_invMass_restituitionCoeff_frictionCoeff;
    mat4 pos_quat_lin_arg;
};

struct aabb//_17
{
    vec4 min;
    vec4 max;
};

struct ioInfo
{
    vec4 point;
};

struct cmdInfo{
    uint vetCont;
    uint insCont;
    uint vetOff;
    uint insOff;
};

layout(set = 0, binding = 0)readonly buffer inRigidBodyDatas
{
    RigidBodyData BodyDatas[];
} RigidBodyDatas;

layout(set = 0, binding = 1)readonly buffer inCollidables
{
    ivec4 Collidable[];
} Collidables;

layout(set = 0, binding = 1)readonly buffer inCollidables_f
{
    vec4 Collidable[];
} Collidables_f;//_381;

layout(set = 0, binding = 2)readonly buffer b3ShapeAabb
{
    aabb bb[];
} localShapeAABB;//_39

layout(set = 0, binding = 3)writeonly buffer B3Aabb
{
    aabb bb[];
} AABB;//_40

layout(set = 0, binding = 4)writeonly buffer pairs
{
    ivec4 pair[];
};

layout(set = 1,binding = 0) writeonly buffer outPos { ioInfo outinfo[]; };

layout(set = 1,binding = 1) writeonly buffer outCmd { cmdInfo cmdinfo[]; };

layout(set = 1,binding = 2) writeonly buffer outPosCube { ioInfo outCubeinfo[];};

layout(set = 1,binding = 3) writeonly buffer outCmdCube { cmdInfo cmdCubeinfo[];};

layout(push_constant, std430) uniform flags_push
{
    ivec4 fl4;
} flags;

vec3 qtransform( vec4 q, vec3 v ){
    return v + 2.0*cross(q.xyz,cross(q.xyz,v) + q.w*v);
}

mat3 QuatGetRotationMatrixABS(vec4 quat)
{
    vec3 quatsq = vec3(quat.x * quat.x, quat.y * quat.y, quat.z * quat.z);
    mat3 quat_mat;

    quat_mat[0].x = 1 - 2 * quatsq.y - 2 * quatsq.z;
    quat_mat[0].y = 2 * quat.x * quat.y - 2 * quat.w * quat.z;
    quat_mat[0].z = 2 * quat.x * quat.z + 2 * quat.w * quat.y;
    //quat_mat[0].w = 0.f;

    quat_mat[1].x = 2 * quat.x * quat.y + 2 * quat.w * quat.z;
    quat_mat[1].y = 1 - 2 * quatsq.x - 2 * quatsq.z;
    quat_mat[1].z = 2 * quat.y * quat.z - 2 * quat.w * quat.x;
    //quat_mat[1].w = 0.f;

    quat_mat[2].x = 2 * quat.x * quat.z - 2 * quat.w * quat.y;
    quat_mat[2].y = 2 * quat.y * quat.z + 2 * quat.w * quat.x;
    quat_mat[2].z = 1 - 2 * quatsq.x - 2 * quatsq.y;
    //quat_mat[2].w = 0.f;

    return mat3(abs(quat_mat[0]),abs(quat_mat[1]),abs(quat_mat[2]));
}

void b3ComputeWorldAabb(uint compID)
{
    int shapeIndex = Collidables.Collidable[RigidBodyDatas.BodyDatas[compID].cilf[0]][3];
    if (shapeIndex > -1)
    {
        vec4 extent0 = (localShapeAABB.bb[shapeIndex].max - localShapeAABB.bb[shapeIndex].min) * vec4(0.5);
        vec4 center0 = (localShapeAABB.bb[shapeIndex].max + localShapeAABB.bb[shapeIndex].min) * vec4(0.5);
        vec3 center1 = qtransform(RigidBodyDatas.BodyDatas[compID].quat,center0.xyz)+RigidBodyDatas.BodyDatas[compID].pos.xyz;
        vec3 extent1 = qtransform(RigidBodyDatas.BodyDatas[compID].quat,extent0.xyz);


        AABB.bb[compID].min = vec4(center1 - extent1,1.0);
        AABB.bb[compID].max = vec4(center1 + extent1,1.0);
        //AABBArg.bb[compID].min.w=compID;
    }
}



void outAabb(vec3 min,vec3 max,vec4 quat,uint vindex){
    vindex = vindex * 3;

    outinfo[vindex].point=vec4(min,1.0);
    //outinfo[vindex].color=vec4(0.0,1.0,0.0,1.0);
    outinfo[vindex+1].point=vec4(max,1.0);
    //outinfo[vindex+1].color=vec4(1.0,1.0,0.0,1.0);

    outinfo[vindex+2].point=quat;
    if(vindex == 0){
        cmdinfo[0].vetCont=gl_NumWorkGroups.x*3;
        cmdinfo[0].insCont=1;
        cmdinfo[0].vetOff=0;
        cmdinfo[0].insOff=0;
    }
}


void computeWorldAabb(vec3 min,vec3 max,vec4 pos,vec4 quat,uint vindex){
    mat3 matQuatABS = QuatGetRotationMatrixABS(quat);
    vec3 center = (max + min)*0.5;
    vec3 extent = (max - min)*0.5;
    vec3 centerAabb=qtransform(quat,center);
    vec3 extentAabb=extent * matQuatABS;//vec3(dot(extent,matQuatABS[0]),dot(extent,matQuatABS[1]),dot(extent,matQuatABS[2]));

    outAabb(centerAabb-extentAabb+pos.xyz,centerAabb+extentAabb+pos.xyz,quat,vindex);
}

void outCube(vec3 min,vec3 max,vec4 pos,vec4 quat,uint vindex){
    vindex = vindex * 4;
    outCubeinfo[vindex].point=pos;
    outCubeinfo[vindex+1].point=quat;
    outCubeinfo[vindex+2].point=vec4(min,1.0);
    outCubeinfo[vindex+3].point=vec4(max,1.0);
    if(vindex == 0){
        cmdCubeinfo[0].vetCont=gl_NumWorkGroups.x*4;
        cmdCubeinfo[0].insCont=1;
        cmdCubeinfo[0].vetOff=0;
        cmdCubeinfo[0].insOff=0;
    }
}

void main()
{
    uint vindex = gl_WorkGroupID.x;
    //computeWorldAabb(vindex);

    vec4 quat = RigidBodyDatas.BodyDatas[vindex].quat;
    vec4 pos = RigidBodyDatas.BodyDatas[vindex].pos;

    uint localAabbIdx = RigidBodyDatas.BodyDatas[vindex].cilf[2];
    vec4 min = localShapeAABB.bb[localAabbIdx].min;
    vec4 max = localShapeAABB.bb[localAabbIdx].max;
    outCube(min.xyz,max.xyz,pos,quat,vindex);
    computeWorldAabb(min.xyz,max.xyz,pos,quat,vindex);
    pair[vindex]=ivec4(0,1,0,0);
}
