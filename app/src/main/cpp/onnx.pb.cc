// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onnx.proto

#include "onnx.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_onnx_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OperatorSetIdProto_onnx_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_onnx_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StringStringEntryProto_onnx_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_onnx_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TensorProto_Segment_onnx_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_onnx_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TensorShapeProto_Dimension_onnx_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_onnx_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TensorProto_onnx_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_onnx_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TensorShapeProto_onnx_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_onnx_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TypeProto_Tensor_onnx_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_onnx_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TypeProto_onnx_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_onnx_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ValueInfoProto_onnx_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_onnx_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_AttributeProto_onnx_2eproto;
namespace onnx {
    class AttributeProtoDefaultTypeInternal {
    public:
        ::google::protobuf::internal::ExplicitlyConstructed<AttributeProto> _instance;
    } _AttributeProto_default_instance_;
    class ValueInfoProtoDefaultTypeInternal {
    public:
        ::google::protobuf::internal::ExplicitlyConstructed<ValueInfoProto> _instance;
    } _ValueInfoProto_default_instance_;
    class NodeProtoDefaultTypeInternal {
    public:
        ::google::protobuf::internal::ExplicitlyConstructed<NodeProto> _instance;
    } _NodeProto_default_instance_;
    class ModelProtoDefaultTypeInternal {
    public:
        ::google::protobuf::internal::ExplicitlyConstructed<ModelProto> _instance;
    } _ModelProto_default_instance_;
    class StringStringEntryProtoDefaultTypeInternal {
    public:
        ::google::protobuf::internal::ExplicitlyConstructed<StringStringEntryProto> _instance;
    } _StringStringEntryProto_default_instance_;
    class GraphProtoDefaultTypeInternal {
    public:
        ::google::protobuf::internal::ExplicitlyConstructed<GraphProto> _instance;
    } _GraphProto_default_instance_;
    class TensorProto_SegmentDefaultTypeInternal {
    public:
        ::google::protobuf::internal::ExplicitlyConstructed<TensorProto_Segment> _instance;
    } _TensorProto_Segment_default_instance_;
    class TensorProtoDefaultTypeInternal {
    public:
        ::google::protobuf::internal::ExplicitlyConstructed<TensorProto> _instance;
    } _TensorProto_default_instance_;
    class TensorShapeProto_DimensionDefaultTypeInternal {
    public:
        ::google::protobuf::internal::ExplicitlyConstructed<TensorShapeProto_Dimension> _instance;
        ::google::protobuf::int64 dim_value_;
        ::google::protobuf::internal::ArenaStringPtr dim_param_;
    } _TensorShapeProto_Dimension_default_instance_;
    class TensorShapeProtoDefaultTypeInternal {
    public:
        ::google::protobuf::internal::ExplicitlyConstructed<TensorShapeProto> _instance;
    } _TensorShapeProto_default_instance_;
    class TypeProto_TensorDefaultTypeInternal {
    public:
        ::google::protobuf::internal::ExplicitlyConstructed<TypeProto_Tensor> _instance;
    } _TypeProto_Tensor_default_instance_;
    class TypeProtoDefaultTypeInternal {
    public:
        ::google::protobuf::internal::ExplicitlyConstructed<TypeProto> _instance;
        const ::onnx::TypeProto_Tensor* tensor_type_;
    } _TypeProto_default_instance_;
    class OperatorSetIdProtoDefaultTypeInternal {
    public:
        ::google::protobuf::internal::ExplicitlyConstructed<OperatorSetIdProto> _instance;
    } _OperatorSetIdProto_default_instance_;
}  // namespace onnx
static void InitDefaultsAttributeProto_onnx_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void* ptr = &::onnx::_AttributeProto_default_instance_;
        new (ptr) ::onnx::AttributeProto();
        ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    {
        void* ptr = &::onnx::_NodeProto_default_instance_;
        new (ptr) ::onnx::NodeProto();
        ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    {
        void* ptr = &::onnx::_GraphProto_default_instance_;
        new (ptr) ::onnx::GraphProto();
        ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::onnx::AttributeProto::InitAsDefaultInstance();
    ::onnx::NodeProto::InitAsDefaultInstance();
    ::onnx::GraphProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AttributeProto_onnx_2eproto =
        {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAttributeProto_onnx_2eproto}, {
                &scc_info_TensorProto_onnx_2eproto.base,
                                                                                      &scc_info_ValueInfoProto_onnx_2eproto.base,}};

static void InitDefaultsValueInfoProto_onnx_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void* ptr = &::onnx::_ValueInfoProto_default_instance_;
        new (ptr) ::onnx::ValueInfoProto();
        ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::onnx::ValueInfoProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ValueInfoProto_onnx_2eproto =
        {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsValueInfoProto_onnx_2eproto}, {
                &scc_info_TypeProto_onnx_2eproto.base,}};

static void InitDefaultsModelProto_onnx_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void* ptr = &::onnx::_ModelProto_default_instance_;
        new (ptr) ::onnx::ModelProto();
        ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::onnx::ModelProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ModelProto_onnx_2eproto =
        {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsModelProto_onnx_2eproto}, {
                &scc_info_OperatorSetIdProto_onnx_2eproto.base,
                                                                                      &scc_info_AttributeProto_onnx_2eproto.base,
                                                                                         &scc_info_StringStringEntryProto_onnx_2eproto.base,}};

static void InitDefaultsStringStringEntryProto_onnx_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void* ptr = &::onnx::_StringStringEntryProto_default_instance_;
        new (ptr) ::onnx::StringStringEntryProto();
        ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::onnx::StringStringEntryProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StringStringEntryProto_onnx_2eproto =
        {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStringStringEntryProto_onnx_2eproto}, {}};

static void InitDefaultsTensorProto_Segment_onnx_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void* ptr = &::onnx::_TensorProto_Segment_default_instance_;
        new (ptr) ::onnx::TensorProto_Segment();
        ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::onnx::TensorProto_Segment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TensorProto_Segment_onnx_2eproto =
        {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTensorProto_Segment_onnx_2eproto}, {}};

static void InitDefaultsTensorProto_onnx_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void* ptr = &::onnx::_TensorProto_default_instance_;
        new (ptr) ::onnx::TensorProto();
        ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::onnx::TensorProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TensorProto_onnx_2eproto =
        {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTensorProto_onnx_2eproto}, {
                &scc_info_TensorProto_Segment_onnx_2eproto.base,}};

static void InitDefaultsTensorShapeProto_Dimension_onnx_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void* ptr = &::onnx::_TensorShapeProto_Dimension_default_instance_;
        new (ptr) ::onnx::TensorShapeProto_Dimension();
        ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::onnx::TensorShapeProto_Dimension::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TensorShapeProto_Dimension_onnx_2eproto =
        {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTensorShapeProto_Dimension_onnx_2eproto}, {}};

static void InitDefaultsTensorShapeProto_onnx_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void* ptr = &::onnx::_TensorShapeProto_default_instance_;
        new (ptr) ::onnx::TensorShapeProto();
        ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::onnx::TensorShapeProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TensorShapeProto_onnx_2eproto =
        {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTensorShapeProto_onnx_2eproto}, {
                &scc_info_TensorShapeProto_Dimension_onnx_2eproto.base,}};

static void InitDefaultsTypeProto_Tensor_onnx_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void* ptr = &::onnx::_TypeProto_Tensor_default_instance_;
        new (ptr) ::onnx::TypeProto_Tensor();
        ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::onnx::TypeProto_Tensor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TypeProto_Tensor_onnx_2eproto =
        {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTypeProto_Tensor_onnx_2eproto}, {
                &scc_info_TensorShapeProto_onnx_2eproto.base,}};

static void InitDefaultsTypeProto_onnx_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void* ptr = &::onnx::_TypeProto_default_instance_;
        new (ptr) ::onnx::TypeProto();
        ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::onnx::TypeProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TypeProto_onnx_2eproto =
        {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTypeProto_onnx_2eproto}, {
                &scc_info_TypeProto_Tensor_onnx_2eproto.base,}};

static void InitDefaultsOperatorSetIdProto_onnx_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void* ptr = &::onnx::_OperatorSetIdProto_default_instance_;
        new (ptr) ::onnx::OperatorSetIdProto();
        ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::onnx::OperatorSetIdProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OperatorSetIdProto_onnx_2eproto =
        {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOperatorSetIdProto_onnx_2eproto}, {}};

namespace onnx {
    bool AttributeProto_AttributeType_IsValid(int value) {
        switch (value) {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
                return true;
            default:
                return false;
        }
    }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const AttributeProto_AttributeType AttributeProto::UNDEFINED;
    const AttributeProto_AttributeType AttributeProto::FLOAT;
    const AttributeProto_AttributeType AttributeProto::INT;
    const AttributeProto_AttributeType AttributeProto::STRING;
    const AttributeProto_AttributeType AttributeProto::TENSOR;
    const AttributeProto_AttributeType AttributeProto::GRAPH;
    const AttributeProto_AttributeType AttributeProto::FLOATS;
    const AttributeProto_AttributeType AttributeProto::INTS;
    const AttributeProto_AttributeType AttributeProto::STRINGS;
    const AttributeProto_AttributeType AttributeProto::TENSORS;
    const AttributeProto_AttributeType AttributeProto::GRAPHS;
    const AttributeProto_AttributeType AttributeProto::AttributeType_MIN;
    const AttributeProto_AttributeType AttributeProto::AttributeType_MAX;
    const int AttributeProto::AttributeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
    bool TensorProto_DataType_IsValid(int value) {
        switch (value) {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
                return true;
            default:
                return false;
        }
    }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const TensorProto_DataType TensorProto::UNDEFINED;
    const TensorProto_DataType TensorProto::FLOAT;
    const TensorProto_DataType TensorProto::UINT8;
    const TensorProto_DataType TensorProto::INT8;
    const TensorProto_DataType TensorProto::UINT16;
    const TensorProto_DataType TensorProto::INT16;
    const TensorProto_DataType TensorProto::INT32;
    const TensorProto_DataType TensorProto::INT64;
    const TensorProto_DataType TensorProto::STRING;
    const TensorProto_DataType TensorProto::BOOL;
    const TensorProto_DataType TensorProto::FLOAT16;
    const TensorProto_DataType TensorProto::DOUBLE;
    const TensorProto_DataType TensorProto::UINT32;
    const TensorProto_DataType TensorProto::UINT64;
    const TensorProto_DataType TensorProto::COMPLEX64;
    const TensorProto_DataType TensorProto::COMPLEX128;
    const TensorProto_DataType TensorProto::BFLOAT16;
    const TensorProto_DataType TensorProto::DataType_MIN;
    const TensorProto_DataType TensorProto::DataType_MAX;
    const int TensorProto::DataType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
    bool Version_IsValid(int value) {
        switch (value) {
            case 0:
            case 1:
            case 2:
            case 3:
                return true;
            default:
                return false;
        }
    }


// ===================================================================

    void AttributeProto::InitAsDefaultInstance() {
        ::onnx::_AttributeProto_default_instance_._instance.get_mutable()->t_ = const_cast< ::onnx::TensorProto*>(
                ::onnx::TensorProto::internal_default_instance());
        ::onnx::_AttributeProto_default_instance_._instance.get_mutable()->g_ = const_cast< ::onnx::GraphProto*>(
                ::onnx::GraphProto::internal_default_instance());
    }
    class AttributeProto::HasBitSetters {
    public:
        static void set_has_name(AttributeProto* msg) {
            msg->_has_bits_[0] |= 0x00000001u;
        }
        static void set_has_ref_attr_name(AttributeProto* msg) {
            msg->_has_bits_[0] |= 0x00000008u;
        }
        static void set_has_doc_string(AttributeProto* msg) {
            msg->_has_bits_[0] |= 0x00000004u;
        }
        static void set_has_type(AttributeProto* msg) {
            msg->_has_bits_[0] |= 0x00000100u;
        }
        static void set_has_f(AttributeProto* msg) {
            msg->_has_bits_[0] |= 0x00000080u;
        }
        static void set_has_i(AttributeProto* msg) {
            msg->_has_bits_[0] |= 0x00000040u;
        }
        static void set_has_s(AttributeProto* msg) {
            msg->_has_bits_[0] |= 0x00000002u;
        }
        static const ::onnx::TensorProto& t(const AttributeProto* msg);
        static void set_has_t(AttributeProto* msg) {
            msg->_has_bits_[0] |= 0x00000010u;
        }
        static const ::onnx::GraphProto& g(const AttributeProto* msg);
        static void set_has_g(AttributeProto* msg) {
            msg->_has_bits_[0] |= 0x00000020u;
        }
    };

    const ::onnx::TensorProto&
    AttributeProto::HasBitSetters::t(const AttributeProto* msg) {
        return *msg->t_;
    }
    const ::onnx::GraphProto&
    AttributeProto::HasBitSetters::g(const AttributeProto* msg) {
        return *msg->g_;
    }
#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int AttributeProto::kNameFieldNumber;
    const int AttributeProto::kRefAttrNameFieldNumber;
    const int AttributeProto::kDocStringFieldNumber;
    const int AttributeProto::kTypeFieldNumber;
    const int AttributeProto::kFFieldNumber;
    const int AttributeProto::kIFieldNumber;
    const int AttributeProto::kSFieldNumber;
    const int AttributeProto::kTFieldNumber;
    const int AttributeProto::kGFieldNumber;
    const int AttributeProto::kFloatsFieldNumber;
    const int AttributeProto::kIntsFieldNumber;
    const int AttributeProto::kStringsFieldNumber;
    const int AttributeProto::kTensorsFieldNumber;
    const int AttributeProto::kGraphsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

    AttributeProto::AttributeProto()
            : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
        SharedCtor();
        // @@protoc_insertion_point(constructor:onnx.AttributeProto)
    }
    AttributeProto::AttributeProto(const AttributeProto& from)
            : ::google::protobuf::MessageLite(),
              _internal_metadata_(nullptr),
              _has_bits_(from._has_bits_),
              floats_(from.floats_),
              ints_(from.ints_),
              strings_(from.strings_),
              tensors_(from.tensors_),
              graphs_(from.graphs_) {
        _internal_metadata_.MergeFrom(from._internal_metadata_);
        name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        if (from.has_name()) {
            name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
        }
        s_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        if (from.has_s()) {
            s_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.s_);
        }
        doc_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        if (from.has_doc_string()) {
            doc_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.doc_string_);
        }
        ref_attr_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        if (from.has_ref_attr_name()) {
            ref_attr_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ref_attr_name_);
        }
        if (from.has_t()) {
            t_ = new ::onnx::TensorProto(*from.t_);
        } else {
            t_ = nullptr;
        }
        if (from.has_g()) {
            g_ = new ::onnx::GraphProto(*from.g_);
        } else {
            g_ = nullptr;
        }
        ::memcpy(&i_, &from.i_,
                 static_cast<size_t>(reinterpret_cast<char*>(&type_) -
                                     reinterpret_cast<char*>(&i_)) + sizeof(type_));
        // @@protoc_insertion_point(copy_constructor:onnx.AttributeProto)
    }

    void AttributeProto::SharedCtor() {
        ::google::protobuf::internal::InitSCC(
                &scc_info_AttributeProto_onnx_2eproto.base);
        name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        s_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        doc_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        ref_attr_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        ::memset(&t_, 0, static_cast<size_t>(
                                 reinterpret_cast<char*>(&type_) -
                                 reinterpret_cast<char*>(&t_)) + sizeof(type_));
    }

    AttributeProto::~AttributeProto() {
        // @@protoc_insertion_point(destructor:onnx.AttributeProto)
        SharedDtor();
    }

    void AttributeProto::SharedDtor() {
        name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        s_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        doc_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        ref_attr_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        if (this != internal_default_instance()) delete t_;
        if (this != internal_default_instance()) delete g_;
    }

    void AttributeProto::SetCachedSize(int size) const {
        _cached_size_.Set(size);
    }
    const AttributeProto& AttributeProto::default_instance() {
        ::google::protobuf::internal::InitSCC(&::scc_info_AttributeProto_onnx_2eproto.base);
        return *internal_default_instance();
    }


    void AttributeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.AttributeProto)
        ::google::protobuf::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void) cached_has_bits;

        floats_.Clear();
        ints_.Clear();
        strings_.Clear();
        tensors_.Clear();
        graphs_.Clear();
        cached_has_bits = _has_bits_[0];
        if (cached_has_bits & 0x0000003fu) {
            if (cached_has_bits & 0x00000001u) {
                name_.ClearNonDefaultToEmptyNoArena();
            }
            if (cached_has_bits & 0x00000002u) {
                s_.ClearNonDefaultToEmptyNoArena();
            }
            if (cached_has_bits & 0x00000004u) {
                doc_string_.ClearNonDefaultToEmptyNoArena();
            }
            if (cached_has_bits & 0x00000008u) {
                ref_attr_name_.ClearNonDefaultToEmptyNoArena();
            }
            if (cached_has_bits & 0x00000010u) {
                        GOOGLE_DCHECK(t_ != nullptr);
                t_->Clear();
            }
            if (cached_has_bits & 0x00000020u) {
                        GOOGLE_DCHECK(g_ != nullptr);
                g_->Clear();
            }
        }
        if (cached_has_bits & 0x000000c0u) {
            ::memset(&i_, 0, static_cast<size_t>(
                                     reinterpret_cast<char*>(&f_) -
                                     reinterpret_cast<char*>(&i_)) + sizeof(f_));
        }
        type_ = 0;
        _has_bits_.Clear();
        _internal_metadata_.Clear();
    }

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
    const char* AttributeProto::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AttributeProto*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        auto str = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          object = str;
          str->clear();
          str->reserve(size);
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto len_delim_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(str, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional float f = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_f(val);
        break;
      }
      // optional int64 i = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = ::google::protobuf::io::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_i(value);
        break;
      }
      // optional bytes s = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        auto str = msg->mutable_s();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          object = str;
          str->clear();
          str->reserve(size);
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto len_delim_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(str, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .onnx.TensorProto t = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::onnx::TensorProto::_InternalParse;
        object = msg->mutable_t();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // optional .onnx.GraphProto g = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::onnx::GraphProto::_InternalParse;
        object = msg->mutable_g();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // repeated float floats = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) == 61) {
          do {
            float val;
            std::memcpy(&val, ptr, 4);
            ptr += 4;
            msg->add_floats(val);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 61 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFloatParser;
        object = msg->mutable_floats();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated int64 ints = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) == 64) {
          do {
            ::google::protobuf::uint64 val;
            ptr = ::google::protobuf::io::Parse64(ptr, &val);
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            ::google::protobuf::int64 value = val;
            msg->add_ints(value);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 64 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedInt64Parser;
        object = msg->mutable_ints();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated bytes strings = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::Parse32(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          auto str = msg->add_strings();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            object = str;
            str->clear();
            str->reserve(size);
            parser_till_end = ::google::protobuf::internal::GreedyStringParser;
            goto len_delim_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(str, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 74 && (ptr += 1));
        break;
      }
      // repeated .onnx.TensorProto tensors = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::Parse32(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::onnx::TensorProto::_InternalParse;
          object = msg->add_tensors();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 82 && (ptr += 1));
        break;
      }
      // repeated .onnx.GraphProto graphs = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::Parse32(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::onnx::GraphProto::_InternalParse;
          object = msg->add_graphs();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 90 && (ptr += 1));
        break;
      }
      // optional string doc_string = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        auto str = msg->mutable_doc_string();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          object = str;
          str->clear();
          str->reserve(size);
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto len_delim_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(str, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .onnx.AttributeProto.AttributeType type = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = ::google::protobuf::io::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        if (!::onnx::AttributeProto_AttributeType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(20, val, msg->mutable_unknown_fields());
          break;
        }
        ::onnx::AttributeProto_AttributeType value = static_cast<::onnx::AttributeProto_AttributeType>(val);
        msg->set_type(value);
        break;
      }
      // optional string ref_attr_name = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 170) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        auto str = msg->mutable_ref_attr_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          object = str;
          str->clear();
          str->reserve(size);
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto len_delim_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(str, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
    bool AttributeProto::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
                &_internal_metadata_);
        ::google::protobuf::io::StringOutputStream unknown_fields_output(
                unknown_fields_setter.buffer());
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
                &unknown_fields_output, false);
        // @@protoc_insertion_point(parse_start:onnx.AttributeProto)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
            tag = p.first;
            if (!p.second) goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                // optional string name = 1;
                case 1: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                                input, this->mutable_name()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // optional float f = 2;
                case 2: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
                        HasBitSetters::set_has_f(this);
                        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                                input, &f_)));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // optional int64 i = 3;
                case 3: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
                        HasBitSetters::set_has_i(this);
                        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                                input, &i_)));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // optional bytes s = 4;
                case 4: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                                input, this->mutable_s()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // optional .onnx.TensorProto t = 5;
                case 5: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                                input, mutable_t()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // optional .onnx.GraphProto g = 6;
                case 6: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                                input, mutable_g()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // repeated float floats = 7;
                case 7: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (61 & 0xFF)) {
                        DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                                float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                                1, 61u, input, this->mutable_floats())));
                    } else if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
                        DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                                float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                                input, this->mutable_floats())));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // repeated int64 ints = 8;
                case 8: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
                        DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                                ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                                1, 64u, input, this->mutable_ints())));
                    } else if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
                        DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                                ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                                input, this->mutable_ints())));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // repeated bytes strings = 9;
                case 9: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                                input, this->add_strings()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // repeated .onnx.TensorProto tensors = 10;
                case 10: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                                input, add_tensors()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // repeated .onnx.GraphProto graphs = 11;
                case 11: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                                input, add_graphs()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // optional string doc_string = 13;
                case 13: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                                input, this->mutable_doc_string()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // optional .onnx.AttributeProto.AttributeType type = 20;
                case 20: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {
                        int value = 0;
                        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                                input, &value)));
                        if (::onnx::AttributeProto_AttributeType_IsValid(value)) {
                            set_type(static_cast< ::onnx::AttributeProto_AttributeType >(value));
                        } else {
                            unknown_fields_stream.WriteVarint32(160u);
                            unknown_fields_stream.WriteVarint32(
                                    static_cast<::google::protobuf::uint32>(value));
                        }
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // optional string ref_attr_name = 21;
                case 21: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (170 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                                input, this->mutable_ref_attr_name()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                default: {
                    handle_unusual:
                    if (tag == 0) {
                        goto success;
                    }
                    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                            input, tag, &unknown_fields_stream));
                    break;
                }
            }
        }
        success:
        // @@protoc_insertion_point(parse_success:onnx.AttributeProto)
        return true;
        failure:
        // @@protoc_insertion_point(parse_failure:onnx.AttributeProto)
        return false;
#undef DO_
    }
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

    void AttributeProto::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
        // @@protoc_insertion_point(serialize_start:onnx.AttributeProto)
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void) cached_has_bits;

        cached_has_bits = _has_bits_[0];
        // optional string name = 1;
        if (cached_has_bits & 0x00000001u) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                    1, this->name(), output);
        }

        // optional float f = 2;
        if (cached_has_bits & 0x00000080u) {
            ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->f(), output);
        }

        // optional int64 i = 3;
        if (cached_has_bits & 0x00000040u) {
            ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->i(), output);
        }

        // optional bytes s = 4;
        if (cached_has_bits & 0x00000002u) {
            ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
                    4, this->s(), output);
        }

        // optional .onnx.TensorProto t = 5;
        if (cached_has_bits & 0x00000010u) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                    5, HasBitSetters::t(this), output);
        }

        // optional .onnx.GraphProto g = 6;
        if (cached_has_bits & 0x00000020u) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                    6, HasBitSetters::g(this), output);
        }

        // repeated float floats = 7;
        for (int i = 0, n = this->floats_size(); i < n; i++) {
            ::google::protobuf::internal::WireFormatLite::WriteFloat(
                    7, this->floats(i), output);
        }

        // repeated int64 ints = 8;
        for (int i = 0, n = this->ints_size(); i < n; i++) {
            ::google::protobuf::internal::WireFormatLite::WriteInt64(
                    8, this->ints(i), output);
        }

        // repeated bytes strings = 9;
        for (int i = 0, n = this->strings_size(); i < n; i++) {
            ::google::protobuf::internal::WireFormatLite::WriteBytes(
                    9, this->strings(i), output);
        }

        // repeated .onnx.TensorProto tensors = 10;
        for (unsigned int i = 0,
                     n = static_cast<unsigned int>(this->tensors_size()); i < n; i++) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                    10,
                    this->tensors(static_cast<int>(i)),
                    output);
        }

        // repeated .onnx.GraphProto graphs = 11;
        for (unsigned int i = 0,
                     n = static_cast<unsigned int>(this->graphs_size()); i < n; i++) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                    11,
                    this->graphs(static_cast<int>(i)),
                    output);
        }

        // optional string doc_string = 13;
        if (cached_has_bits & 0x00000004u) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                    13, this->doc_string(), output);
        }

        // optional .onnx.AttributeProto.AttributeType type = 20;
        if (cached_has_bits & 0x00000100u) {
            ::google::protobuf::internal::WireFormatLite::WriteEnum(
                    20, this->type(), output);
        }

        // optional string ref_attr_name = 21;
        if (cached_has_bits & 0x00000008u) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                    21, this->ref_attr_name(), output);
        }

        output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                         static_cast<int>(_internal_metadata_.unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:onnx.AttributeProto)
    }

    size_t AttributeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.AttributeProto)
        size_t total_size = 0;

        total_size += _internal_metadata_.unknown_fields().size();

        ::google::protobuf::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void) cached_has_bits;

        // repeated float floats = 7;
        {
            unsigned int count = static_cast<unsigned int>(this->floats_size());
            size_t data_size = 4UL * count;
            total_size += 1 *
                          ::google::protobuf::internal::FromIntSize(this->floats_size());
            total_size += data_size;
        }

        // repeated int64 ints = 8;
        {
            size_t data_size = ::google::protobuf::internal::WireFormatLite::
            Int64Size(this->ints_);
            total_size += 1 *
                          ::google::protobuf::internal::FromIntSize(this->ints_size());
            total_size += data_size;
        }

        // repeated bytes strings = 9;
        total_size += 1 *
                      ::google::protobuf::internal::FromIntSize(this->strings_size());
        for (int i = 0, n = this->strings_size(); i < n; i++) {
            total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
                    this->strings(i));
        }

        // repeated .onnx.TensorProto tensors = 10;
        {
            unsigned int count = static_cast<unsigned int>(this->tensors_size());
            total_size += 1UL * count;
            for (unsigned int i = 0; i < count; i++) {
                total_size +=
                        ::google::protobuf::internal::WireFormatLite::MessageSize(
                                this->tensors(static_cast<int>(i)));
            }
        }

        // repeated .onnx.GraphProto graphs = 11;
        {
            unsigned int count = static_cast<unsigned int>(this->graphs_size());
            total_size += 1UL * count;
            for (unsigned int i = 0; i < count; i++) {
                total_size +=
                        ::google::protobuf::internal::WireFormatLite::MessageSize(
                                this->graphs(static_cast<int>(i)));
            }
        }

        cached_has_bits = _has_bits_[0];
        if (cached_has_bits & 0x000000ffu) {
            // optional string name = 1;
            if (cached_has_bits & 0x00000001u) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->name());
            }

            // optional bytes s = 4;
            if (cached_has_bits & 0x00000002u) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->s());
            }

            // optional string doc_string = 13;
            if (cached_has_bits & 0x00000004u) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->doc_string());
            }

            // optional string ref_attr_name = 21;
            if (cached_has_bits & 0x00000008u) {
                total_size += 2 +
                              ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->ref_attr_name());
            }

            // optional .onnx.TensorProto t = 5;
            if (cached_has_bits & 0x00000010u) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::MessageSize(
                                      *t_);
            }

            // optional .onnx.GraphProto g = 6;
            if (cached_has_bits & 0x00000020u) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::MessageSize(
                                      *g_);
            }

            // optional int64 i = 3;
            if (cached_has_bits & 0x00000040u) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::Int64Size(
                                      this->i());
            }

            // optional float f = 2;
            if (cached_has_bits & 0x00000080u) {
                total_size += 1 + 4;
            }

        }
        // optional .onnx.AttributeProto.AttributeType type = 20;
        if (cached_has_bits & 0x00000100u) {
            total_size += 2 +
                          ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
        }

        int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
        SetCachedSize(cached_size);
        return total_size;
    }

    void AttributeProto::CheckTypeAndMergeFrom(
            const ::google::protobuf::MessageLite& from) {
        MergeFrom(*::google::protobuf::down_cast<const AttributeProto*>(&from));
    }

    void AttributeProto::MergeFrom(const AttributeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx.AttributeProto)
                GOOGLE_DCHECK_NE(&from, this);
        _internal_metadata_.MergeFrom(from._internal_metadata_);
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void) cached_has_bits;

        floats_.MergeFrom(from.floats_);
        ints_.MergeFrom(from.ints_);
        strings_.MergeFrom(from.strings_);
        tensors_.MergeFrom(from.tensors_);
        graphs_.MergeFrom(from.graphs_);
        cached_has_bits = from._has_bits_[0];
        if (cached_has_bits & 0x000000ffu) {
            if (cached_has_bits & 0x00000001u) {
                _has_bits_[0] |= 0x00000001u;
                name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
            }
            if (cached_has_bits & 0x00000002u) {
                _has_bits_[0] |= 0x00000002u;
                s_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.s_);
            }
            if (cached_has_bits & 0x00000004u) {
                _has_bits_[0] |= 0x00000004u;
                doc_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.doc_string_);
            }
            if (cached_has_bits & 0x00000008u) {
                _has_bits_[0] |= 0x00000008u;
                ref_attr_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ref_attr_name_);
            }
            if (cached_has_bits & 0x00000010u) {
                mutable_t()->::onnx::TensorProto::MergeFrom(from.t());
            }
            if (cached_has_bits & 0x00000020u) {
                mutable_g()->::onnx::GraphProto::MergeFrom(from.g());
            }
            if (cached_has_bits & 0x00000040u) {
                i_ = from.i_;
            }
            if (cached_has_bits & 0x00000080u) {
                f_ = from.f_;
            }
            _has_bits_[0] |= cached_has_bits;
        }
        if (cached_has_bits & 0x00000100u) {
            set_type(from.type());
        }
    }

    void AttributeProto::CopyFrom(const AttributeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.AttributeProto)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool AttributeProto::IsInitialized() const {
        return true;
    }

    void AttributeProto::Swap(AttributeProto* other) {
        if (other == this) return;
        InternalSwap(other);
    }
    void AttributeProto::InternalSwap(AttributeProto* other) {
        using std::swap;
        _internal_metadata_.Swap(&other->_internal_metadata_);
        swap(_has_bits_[0], other->_has_bits_[0]);
        floats_.InternalSwap(&other->floats_);
        ints_.InternalSwap(&other->ints_);
        strings_.InternalSwap(CastToBase(&other->strings_));
        CastToBase(&tensors_)->InternalSwap(CastToBase(&other->tensors_));
        CastToBase(&graphs_)->InternalSwap(CastToBase(&other->graphs_));
        name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                   GetArenaNoVirtual());
        s_.Swap(&other->s_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                GetArenaNoVirtual());
        doc_string_.Swap(&other->doc_string_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                         GetArenaNoVirtual());
        ref_attr_name_.Swap(&other->ref_attr_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                            GetArenaNoVirtual());
        swap(t_, other->t_);
        swap(g_, other->g_);
        swap(i_, other->i_);
        swap(f_, other->f_);
        swap(type_, other->type_);
    }

    ::std::string AttributeProto::GetTypeName() const {
        return "onnx.AttributeProto";
    }


// ===================================================================

    void ValueInfoProto::InitAsDefaultInstance() {
        ::onnx::_ValueInfoProto_default_instance_._instance.get_mutable()->type_ = const_cast< ::onnx::TypeProto*>(
                ::onnx::TypeProto::internal_default_instance());
    }
    class ValueInfoProto::HasBitSetters {
    public:
        static void set_has_name(ValueInfoProto* msg) {
            msg->_has_bits_[0] |= 0x00000001u;
        }
        static const ::onnx::TypeProto& type(const ValueInfoProto* msg);
        static void set_has_type(ValueInfoProto* msg) {
            msg->_has_bits_[0] |= 0x00000004u;
        }
        static void set_has_doc_string(ValueInfoProto* msg) {
            msg->_has_bits_[0] |= 0x00000002u;
        }
    };

    const ::onnx::TypeProto&
    ValueInfoProto::HasBitSetters::type(const ValueInfoProto* msg) {
        return *msg->type_;
    }
#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int ValueInfoProto::kNameFieldNumber;
    const int ValueInfoProto::kTypeFieldNumber;
    const int ValueInfoProto::kDocStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

    ValueInfoProto::ValueInfoProto()
            : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
        SharedCtor();
        // @@protoc_insertion_point(constructor:onnx.ValueInfoProto)
    }
    ValueInfoProto::ValueInfoProto(const ValueInfoProto& from)
            : ::google::protobuf::MessageLite(),
              _internal_metadata_(nullptr),
              _has_bits_(from._has_bits_) {
        _internal_metadata_.MergeFrom(from._internal_metadata_);
        name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        if (from.has_name()) {
            name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
        }
        doc_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        if (from.has_doc_string()) {
            doc_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.doc_string_);
        }
        if (from.has_type()) {
            type_ = new ::onnx::TypeProto(*from.type_);
        } else {
            type_ = nullptr;
        }
        // @@protoc_insertion_point(copy_constructor:onnx.ValueInfoProto)
    }

    void ValueInfoProto::SharedCtor() {
        ::google::protobuf::internal::InitSCC(
                &scc_info_ValueInfoProto_onnx_2eproto.base);
        name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        doc_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        type_ = nullptr;
    }

    ValueInfoProto::~ValueInfoProto() {
        // @@protoc_insertion_point(destructor:onnx.ValueInfoProto)
        SharedDtor();
    }

    void ValueInfoProto::SharedDtor() {
        name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        doc_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        if (this != internal_default_instance()) delete type_;
    }

    void ValueInfoProto::SetCachedSize(int size) const {
        _cached_size_.Set(size);
    }
    const ValueInfoProto& ValueInfoProto::default_instance() {
        ::google::protobuf::internal::InitSCC(&::scc_info_ValueInfoProto_onnx_2eproto.base);
        return *internal_default_instance();
    }


    void ValueInfoProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.ValueInfoProto)
        ::google::protobuf::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void) cached_has_bits;

        cached_has_bits = _has_bits_[0];
        if (cached_has_bits & 0x00000007u) {
            if (cached_has_bits & 0x00000001u) {
                name_.ClearNonDefaultToEmptyNoArena();
            }
            if (cached_has_bits & 0x00000002u) {
                doc_string_.ClearNonDefaultToEmptyNoArena();
            }
            if (cached_has_bits & 0x00000004u) {
                        GOOGLE_DCHECK(type_ != nullptr);
                type_->Clear();
            }
        }
        _has_bits_.Clear();
        _internal_metadata_.Clear();
    }

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
    const char* ValueInfoProto::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ValueInfoProto*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        auto str = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          object = str;
          str->clear();
          str->reserve(size);
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto len_delim_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(str, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .onnx.TypeProto type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::onnx::TypeProto::_InternalParse;
        object = msg->mutable_type();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // optional string doc_string = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        auto str = msg->mutable_doc_string();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          object = str;
          str->clear();
          str->reserve(size);
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto len_delim_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(str, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
    bool ValueInfoProto::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
                &_internal_metadata_);
        ::google::protobuf::io::StringOutputStream unknown_fields_output(
                unknown_fields_setter.buffer());
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
                &unknown_fields_output, false);
        // @@protoc_insertion_point(parse_start:onnx.ValueInfoProto)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
            tag = p.first;
            if (!p.second) goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                // optional string name = 1;
                case 1: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                                input, this->mutable_name()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // optional .onnx.TypeProto type = 2;
                case 2: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                                input, mutable_type()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // optional string doc_string = 3;
                case 3: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                                input, this->mutable_doc_string()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                default: {
                    handle_unusual:
                    if (tag == 0) {
                        goto success;
                    }
                    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                            input, tag, &unknown_fields_stream));
                    break;
                }
            }
        }
        success:
        // @@protoc_insertion_point(parse_success:onnx.ValueInfoProto)
        return true;
        failure:
        // @@protoc_insertion_point(parse_failure:onnx.ValueInfoProto)
        return false;
#undef DO_
    }
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

    void ValueInfoProto::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
        // @@protoc_insertion_point(serialize_start:onnx.ValueInfoProto)
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void) cached_has_bits;

        cached_has_bits = _has_bits_[0];
        // optional string name = 1;
        if (cached_has_bits & 0x00000001u) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                    1, this->name(), output);
        }

        // optional .onnx.TypeProto type = 2;
        if (cached_has_bits & 0x00000004u) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                    2, HasBitSetters::type(this), output);
        }

        // optional string doc_string = 3;
        if (cached_has_bits & 0x00000002u) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                    3, this->doc_string(), output);
        }

        output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                         static_cast<int>(_internal_metadata_.unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:onnx.ValueInfoProto)
    }

    size_t ValueInfoProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.ValueInfoProto)
        size_t total_size = 0;

        total_size += _internal_metadata_.unknown_fields().size();

        ::google::protobuf::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void) cached_has_bits;

        cached_has_bits = _has_bits_[0];
        if (cached_has_bits & 0x00000007u) {
            // optional string name = 1;
            if (cached_has_bits & 0x00000001u) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->name());
            }

            // optional string doc_string = 3;
            if (cached_has_bits & 0x00000002u) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->doc_string());
            }

            // optional .onnx.TypeProto type = 2;
            if (cached_has_bits & 0x00000004u) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::MessageSize(
                                      *type_);
            }

        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
        SetCachedSize(cached_size);
        return total_size;
    }

    void ValueInfoProto::CheckTypeAndMergeFrom(
            const ::google::protobuf::MessageLite& from) {
        MergeFrom(*::google::protobuf::down_cast<const ValueInfoProto*>(&from));
    }

    void ValueInfoProto::MergeFrom(const ValueInfoProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx.ValueInfoProto)
                GOOGLE_DCHECK_NE(&from, this);
        _internal_metadata_.MergeFrom(from._internal_metadata_);
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void) cached_has_bits;

        cached_has_bits = from._has_bits_[0];
        if (cached_has_bits & 0x00000007u) {
            if (cached_has_bits & 0x00000001u) {
                _has_bits_[0] |= 0x00000001u;
                name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
            }
            if (cached_has_bits & 0x00000002u) {
                _has_bits_[0] |= 0x00000002u;
                doc_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.doc_string_);
            }
            if (cached_has_bits & 0x00000004u) {
                mutable_type()->::onnx::TypeProto::MergeFrom(from.type());
            }
        }
    }

    void ValueInfoProto::CopyFrom(const ValueInfoProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.ValueInfoProto)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool ValueInfoProto::IsInitialized() const {
        return true;
    }

    void ValueInfoProto::Swap(ValueInfoProto* other) {
        if (other == this) return;
        InternalSwap(other);
    }
    void ValueInfoProto::InternalSwap(ValueInfoProto* other) {
        using std::swap;
        _internal_metadata_.Swap(&other->_internal_metadata_);
        swap(_has_bits_[0], other->_has_bits_[0]);
        name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                   GetArenaNoVirtual());
        doc_string_.Swap(&other->doc_string_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                         GetArenaNoVirtual());
        swap(type_, other->type_);
    }

    ::std::string ValueInfoProto::GetTypeName() const {
        return "onnx.ValueInfoProto";
    }


// ===================================================================

    void NodeProto::InitAsDefaultInstance() {
    }
    class NodeProto::HasBitSetters {
    public:
        static void set_has_name(NodeProto* msg) {
            msg->_has_bits_[0] |= 0x00000001u;
        }
        static void set_has_op_type(NodeProto* msg) {
            msg->_has_bits_[0] |= 0x00000002u;
        }
        static void set_has_domain(NodeProto* msg) {
            msg->_has_bits_[0] |= 0x00000008u;
        }
        static void set_has_doc_string(NodeProto* msg) {
            msg->_has_bits_[0] |= 0x00000004u;
        }
    };

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int NodeProto::kInputFieldNumber;
    const int NodeProto::kOutputFieldNumber;
    const int NodeProto::kNameFieldNumber;
    const int NodeProto::kOpTypeFieldNumber;
    const int NodeProto::kDomainFieldNumber;
    const int NodeProto::kAttributeFieldNumber;
    const int NodeProto::kDocStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

    NodeProto::NodeProto()
            : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
        SharedCtor();
        // @@protoc_insertion_point(constructor:onnx.NodeProto)
    }
    NodeProto::NodeProto(const NodeProto& from)
            : ::google::protobuf::MessageLite(),
              _internal_metadata_(nullptr),
              _has_bits_(from._has_bits_),
              input_(from.input_),
              output_(from.output_),
              attribute_(from.attribute_) {
        _internal_metadata_.MergeFrom(from._internal_metadata_);
        name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        if (from.has_name()) {
            name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
        }
        op_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        if (from.has_op_type()) {
            op_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.op_type_);
        }
        doc_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        if (from.has_doc_string()) {
            doc_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.doc_string_);
        }
        domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        if (from.has_domain()) {
            domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
        }
        // @@protoc_insertion_point(copy_constructor:onnx.NodeProto)
    }

    void NodeProto::SharedCtor() {
        ::google::protobuf::internal::InitSCC(
                &scc_info_AttributeProto_onnx_2eproto.base);
        name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        op_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        doc_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    NodeProto::~NodeProto() {
        // @@protoc_insertion_point(destructor:onnx.NodeProto)
        SharedDtor();
    }

    void NodeProto::SharedDtor() {
        name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        op_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        doc_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    void NodeProto::SetCachedSize(int size) const {
        _cached_size_.Set(size);
    }
    const NodeProto& NodeProto::default_instance() {
        ::google::protobuf::internal::InitSCC(&::scc_info_AttributeProto_onnx_2eproto.base);
        return *internal_default_instance();
    }


    void NodeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.NodeProto)
        ::google::protobuf::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void) cached_has_bits;

        input_.Clear();
        output_.Clear();
        attribute_.Clear();
        cached_has_bits = _has_bits_[0];
        if (cached_has_bits & 0x0000000fu) {
            if (cached_has_bits & 0x00000001u) {
                name_.ClearNonDefaultToEmptyNoArena();
            }
            if (cached_has_bits & 0x00000002u) {
                op_type_.ClearNonDefaultToEmptyNoArena();
            }
            if (cached_has_bits & 0x00000004u) {
                doc_string_.ClearNonDefaultToEmptyNoArena();
            }
            if (cached_has_bits & 0x00000008u) {
                domain_.ClearNonDefaultToEmptyNoArena();
            }
        }
        _has_bits_.Clear();
        _internal_metadata_.Clear();
    }

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
    const char* NodeProto::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NodeProto*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string input = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::Parse32(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          auto str = msg->add_input();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            object = str;
            str->clear();
            str->reserve(size);
            parser_till_end = ::google::protobuf::internal::GreedyStringParser;
            goto len_delim_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(str, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // repeated string output = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::Parse32(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          auto str = msg->add_output();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            object = str;
            str->clear();
            str->reserve(size);
            parser_till_end = ::google::protobuf::internal::GreedyStringParser;
            goto len_delim_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(str, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // optional string name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        auto str = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          object = str;
          str->clear();
          str->reserve(size);
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto len_delim_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(str, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string op_type = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        auto str = msg->mutable_op_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          object = str;
          str->clear();
          str->reserve(size);
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto len_delim_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(str, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .onnx.AttributeProto attribute = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::Parse32(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::onnx::AttributeProto::_InternalParse;
          object = msg->add_attribute();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // optional string doc_string = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        auto str = msg->mutable_doc_string();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          object = str;
          str->clear();
          str->reserve(size);
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto len_delim_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(str, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string domain = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        auto str = msg->mutable_domain();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          object = str;
          str->clear();
          str->reserve(size);
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto len_delim_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(str, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
    bool NodeProto::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
                &_internal_metadata_);
        ::google::protobuf::io::StringOutputStream unknown_fields_output(
                unknown_fields_setter.buffer());
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
                &unknown_fields_output, false);
        // @@protoc_insertion_point(parse_start:onnx.NodeProto)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
            tag = p.first;
            if (!p.second) goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                // repeated string input = 1;
                case 1: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                                input, this->add_input()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // repeated string output = 2;
                case 2: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                                input, this->add_output()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // optional string name = 3;
                case 3: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                                input, this->mutable_name()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // optional string op_type = 4;
                case 4: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                                input, this->mutable_op_type()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // repeated .onnx.AttributeProto attribute = 5;
                case 5: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                                input, add_attribute()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // optional string doc_string = 6;
                case 6: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                                input, this->mutable_doc_string()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // optional string domain = 7;
                case 7: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                                input, this->mutable_domain()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                default: {
                    handle_unusual:
                    if (tag == 0) {
                        goto success;
                    }
                    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                            input, tag, &unknown_fields_stream));
                    break;
                }
            }
        }
        success:
        // @@protoc_insertion_point(parse_success:onnx.NodeProto)
        return true;
        failure:
        // @@protoc_insertion_point(parse_failure:onnx.NodeProto)
        return false;
#undef DO_
    }
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

    void NodeProto::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
        // @@protoc_insertion_point(serialize_start:onnx.NodeProto)
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void) cached_has_bits;

        // repeated string input = 1;
        for (int i = 0, n = this->input_size(); i < n; i++) {
            ::google::protobuf::internal::WireFormatLite::WriteString(
                    1, this->input(i), output);
        }

        // repeated string output = 2;
        for (int i = 0, n = this->output_size(); i < n; i++) {
            ::google::protobuf::internal::WireFormatLite::WriteString(
                    2, this->output(i), output);
        }

        cached_has_bits = _has_bits_[0];
        // optional string name = 3;
        if (cached_has_bits & 0x00000001u) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                    3, this->name(), output);
        }

        // optional string op_type = 4;
        if (cached_has_bits & 0x00000002u) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                    4, this->op_type(), output);
        }

        // repeated .onnx.AttributeProto attribute = 5;
        for (unsigned int i = 0,
                     n = static_cast<unsigned int>(this->attribute_size()); i < n; i++) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                    5,
                    this->attribute(static_cast<int>(i)),
                    output);
        }

        // optional string doc_string = 6;
        if (cached_has_bits & 0x00000004u) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                    6, this->doc_string(), output);
        }

        // optional string domain = 7;
        if (cached_has_bits & 0x00000008u) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                    7, this->domain(), output);
        }

        output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                         static_cast<int>(_internal_metadata_.unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:onnx.NodeProto)
    }

    size_t NodeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.NodeProto)
        size_t total_size = 0;

        total_size += _internal_metadata_.unknown_fields().size();

        ::google::protobuf::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void) cached_has_bits;

        // repeated string input = 1;
        total_size += 1 *
                      ::google::protobuf::internal::FromIntSize(this->input_size());
        for (int i = 0, n = this->input_size(); i < n; i++) {
            total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this->input(i));
        }

        // repeated string output = 2;
        total_size += 1 *
                      ::google::protobuf::internal::FromIntSize(this->output_size());
        for (int i = 0, n = this->output_size(); i < n; i++) {
            total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this->output(i));
        }

        // repeated .onnx.AttributeProto attribute = 5;
        {
            unsigned int count = static_cast<unsigned int>(this->attribute_size());
            total_size += 1UL * count;
            for (unsigned int i = 0; i < count; i++) {
                total_size +=
                        ::google::protobuf::internal::WireFormatLite::MessageSize(
                                this->attribute(static_cast<int>(i)));
            }
        }

        cached_has_bits = _has_bits_[0];
        if (cached_has_bits & 0x0000000fu) {
            // optional string name = 3;
            if (cached_has_bits & 0x00000001u) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->name());
            }

            // optional string op_type = 4;
            if (cached_has_bits & 0x00000002u) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->op_type());
            }

            // optional string doc_string = 6;
            if (cached_has_bits & 0x00000004u) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->doc_string());
            }

            // optional string domain = 7;
            if (cached_has_bits & 0x00000008u) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->domain());
            }

        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
        SetCachedSize(cached_size);
        return total_size;
    }

    void NodeProto::CheckTypeAndMergeFrom(
            const ::google::protobuf::MessageLite& from) {
        MergeFrom(*::google::protobuf::down_cast<const NodeProto*>(&from));
    }

    void NodeProto::MergeFrom(const NodeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx.NodeProto)
                GOOGLE_DCHECK_NE(&from, this);
        _internal_metadata_.MergeFrom(from._internal_metadata_);
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void) cached_has_bits;

        input_.MergeFrom(from.input_);
        output_.MergeFrom(from.output_);
        attribute_.MergeFrom(from.attribute_);
        cached_has_bits = from._has_bits_[0];
        if (cached_has_bits & 0x0000000fu) {
            if (cached_has_bits & 0x00000001u) {
                _has_bits_[0] |= 0x00000001u;
                name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
            }
            if (cached_has_bits & 0x00000002u) {
                _has_bits_[0] |= 0x00000002u;
                op_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.op_type_);
            }
            if (cached_has_bits & 0x00000004u) {
                _has_bits_[0] |= 0x00000004u;
                doc_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.doc_string_);
            }
            if (cached_has_bits & 0x00000008u) {
                _has_bits_[0] |= 0x00000008u;
                domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
            }
        }
    }

    void NodeProto::CopyFrom(const NodeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.NodeProto)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool NodeProto::IsInitialized() const {
        return true;
    }

    void NodeProto::Swap(NodeProto* other) {
        if (other == this) return;
        InternalSwap(other);
    }
    void NodeProto::InternalSwap(NodeProto* other) {
        using std::swap;
        _internal_metadata_.Swap(&other->_internal_metadata_);
        swap(_has_bits_[0], other->_has_bits_[0]);
        input_.InternalSwap(CastToBase(&other->input_));
        output_.InternalSwap(CastToBase(&other->output_));
        CastToBase(&attribute_)->InternalSwap(CastToBase(&other->attribute_));
        name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                   GetArenaNoVirtual());
        op_type_.Swap(&other->op_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                      GetArenaNoVirtual());
        doc_string_.Swap(&other->doc_string_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                         GetArenaNoVirtual());
        domain_.Swap(&other->domain_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                     GetArenaNoVirtual());
    }

    ::std::string NodeProto::GetTypeName() const {
        return "onnx.NodeProto";
    }


// ===================================================================

    void ModelProto::InitAsDefaultInstance() {
        ::onnx::_ModelProto_default_instance_._instance.get_mutable()->graph_ = const_cast< ::onnx::GraphProto*>(
                ::onnx::GraphProto::internal_default_instance());
    }
    class ModelProto::HasBitSetters {
    public:
        static void set_has_ir_version(ModelProto* msg) {
            msg->_has_bits_[0] |= 0x00000020u;
        }
        static void set_has_producer_name(ModelProto* msg) {
            msg->_has_bits_[0] |= 0x00000001u;
        }
        static void set_has_producer_version(ModelProto* msg) {
            msg->_has_bits_[0] |= 0x00000002u;
        }
        static void set_has_domain(ModelProto* msg) {
            msg->_has_bits_[0] |= 0x00000004u;
        }
        static void set_has_model_version(ModelProto* msg) {
            msg->_has_bits_[0] |= 0x00000040u;
        }
        static void set_has_doc_string(ModelProto* msg) {
            msg->_has_bits_[0] |= 0x00000008u;
        }
        static const ::onnx::GraphProto& graph(const ModelProto* msg);
        static void set_has_graph(ModelProto* msg) {
            msg->_has_bits_[0] |= 0x00000010u;
        }
    };

    const ::onnx::GraphProto&
    ModelProto::HasBitSetters::graph(const ModelProto* msg) {
        return *msg->graph_;
    }
#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int ModelProto::kIrVersionFieldNumber;
    const int ModelProto::kOpsetImportFieldNumber;
    const int ModelProto::kProducerNameFieldNumber;
    const int ModelProto::kProducerVersionFieldNumber;
    const int ModelProto::kDomainFieldNumber;
    const int ModelProto::kModelVersionFieldNumber;
    const int ModelProto::kDocStringFieldNumber;
    const int ModelProto::kGraphFieldNumber;
    const int ModelProto::kMetadataPropsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

    ModelProto::ModelProto()
            : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
        SharedCtor();
        // @@protoc_insertion_point(constructor:onnx.ModelProto)
    }
    ModelProto::ModelProto(const ModelProto& from)
            : ::google::protobuf::MessageLite(),
              _internal_metadata_(nullptr),
              _has_bits_(from._has_bits_),
              opset_import_(from.opset_import_),
              metadata_props_(from.metadata_props_) {
        _internal_metadata_.MergeFrom(from._internal_metadata_);
        producer_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        if (from.has_producer_name()) {
            producer_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.producer_name_);
        }
        producer_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        if (from.has_producer_version()) {
            producer_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.producer_version_);
        }
        domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        if (from.has_domain()) {
            domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
        }
        doc_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        if (from.has_doc_string()) {
            doc_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.doc_string_);
        }
        if (from.has_graph()) {
            graph_ = new ::onnx::GraphProto(*from.graph_);
        } else {
            graph_ = nullptr;
        }
        ::memcpy(&ir_version_, &from.ir_version_,
                 static_cast<size_t>(reinterpret_cast<char*>(&model_version_) -
                                     reinterpret_cast<char*>(&ir_version_)) + sizeof(model_version_));
        // @@protoc_insertion_point(copy_constructor:onnx.ModelProto)
    }

    void ModelProto::SharedCtor() {
        ::google::protobuf::internal::InitSCC(
                &scc_info_ModelProto_onnx_2eproto.base);
        producer_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        producer_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        doc_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        ::memset(&graph_, 0, static_cast<size_t>(
                                     reinterpret_cast<char*>(&model_version_) -
                                     reinterpret_cast<char*>(&graph_)) + sizeof(model_version_));
    }

    ModelProto::~ModelProto() {
        // @@protoc_insertion_point(destructor:onnx.ModelProto)
        SharedDtor();
    }

    void ModelProto::SharedDtor() {
        producer_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        producer_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        doc_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        if (this != internal_default_instance()) delete graph_;
    }

    void ModelProto::SetCachedSize(int size) const {
        _cached_size_.Set(size);
    }
    const ModelProto& ModelProto::default_instance() {
        ::google::protobuf::internal::InitSCC(&::scc_info_ModelProto_onnx_2eproto.base);
        return *internal_default_instance();
    }


    void ModelProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.ModelProto)
        ::google::protobuf::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void) cached_has_bits;

        opset_import_.Clear();
        metadata_props_.Clear();
        cached_has_bits = _has_bits_[0];
        if (cached_has_bits & 0x0000001fu) {
            if (cached_has_bits & 0x00000001u) {
                producer_name_.ClearNonDefaultToEmptyNoArena();
            }
            if (cached_has_bits & 0x00000002u) {
                producer_version_.ClearNonDefaultToEmptyNoArena();
            }
            if (cached_has_bits & 0x00000004u) {
                domain_.ClearNonDefaultToEmptyNoArena();
            }
            if (cached_has_bits & 0x00000008u) {
                doc_string_.ClearNonDefaultToEmptyNoArena();
            }
            if (cached_has_bits & 0x00000010u) {
                        GOOGLE_DCHECK(graph_ != nullptr);
                graph_->Clear();
            }
        }
        if (cached_has_bits & 0x00000060u) {
            ::memset(&ir_version_, 0, static_cast<size_t>(
                                              reinterpret_cast<char*>(&model_version_) -
                                              reinterpret_cast<char*>(&ir_version_)) + sizeof(model_version_));
        }
        _has_bits_.Clear();
        _internal_metadata_.Clear();
    }

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
    const char* ModelProto::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ModelProto*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int64 ir_version = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = ::google::protobuf::io::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_ir_version(value);
        break;
      }
      // optional string producer_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        auto str = msg->mutable_producer_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          object = str;
          str->clear();
          str->reserve(size);
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto len_delim_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(str, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string producer_version = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        auto str = msg->mutable_producer_version();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          object = str;
          str->clear();
          str->reserve(size);
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto len_delim_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(str, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string domain = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        auto str = msg->mutable_domain();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          object = str;
          str->clear();
          str->reserve(size);
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto len_delim_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(str, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int64 model_version = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = ::google::protobuf::io::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_model_version(value);
        break;
      }
      // optional string doc_string = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        auto str = msg->mutable_doc_string();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          object = str;
          str->clear();
          str->reserve(size);
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto len_delim_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(str, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .onnx.GraphProto graph = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::onnx::GraphProto::_InternalParse;
        object = msg->mutable_graph();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // repeated .onnx.OperatorSetIdProto opset_import = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::Parse32(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::onnx::OperatorSetIdProto::_InternalParse;
          object = msg->add_opset_import();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 66 && (ptr += 1));
        break;
      }
      // repeated .onnx.StringStringEntryProto metadata_props = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::Parse32(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::onnx::StringStringEntryProto::_InternalParse;
          object = msg->add_metadata_props();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 114 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
    bool ModelProto::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
                &_internal_metadata_);
        ::google::protobuf::io::StringOutputStream unknown_fields_output(
                unknown_fields_setter.buffer());
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
                &unknown_fields_output, false);
        // @@protoc_insertion_point(parse_start:onnx.ModelProto)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
            tag = p.first;
            if (!p.second) goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                // optional int64 ir_version = 1;
                case 1: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
                        HasBitSetters::set_has_ir_version(this);
                        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                                input, &ir_version_)));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // optional string producer_name = 2;
                case 2: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                                input, this->mutable_producer_name()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // optional string producer_version = 3;
                case 3: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                                input, this->mutable_producer_version()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // optional string domain = 4;
                case 4: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                                input, this->mutable_domain()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // optional int64 model_version = 5;
                case 5: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
                        HasBitSetters::set_has_model_version(this);
                        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                                input, &model_version_)));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // optional string doc_string = 6;
                case 6: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                                input, this->mutable_doc_string()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // optional .onnx.GraphProto graph = 7;
                case 7: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                                input, mutable_graph()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // repeated .onnx.OperatorSetIdProto opset_import = 8;
                case 8: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                                input, add_opset_import()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // repeated .onnx.StringStringEntryProto metadata_props = 14;
                case 14: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                                input, add_metadata_props()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                default: {
                    handle_unusual:
                    if (tag == 0) {
                        goto success;
                    }
                    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                            input, tag, &unknown_fields_stream));
                    break;
                }
            }
        }
        success:
        // @@protoc_insertion_point(parse_success:onnx.ModelProto)
        return true;
        failure:
        // @@protoc_insertion_point(parse_failure:onnx.ModelProto)
        return false;
#undef DO_
    }
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

    void ModelProto::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
        // @@protoc_insertion_point(serialize_start:onnx.ModelProto)
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void) cached_has_bits;

        cached_has_bits = _has_bits_[0];
        // optional int64 ir_version = 1;
        if (cached_has_bits & 0x00000020u) {
            ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->ir_version(), output);
        }

        // optional string producer_name = 2;
        if (cached_has_bits & 0x00000001u) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                    2, this->producer_name(), output);
        }

        // optional string producer_version = 3;
        if (cached_has_bits & 0x00000002u) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                    3, this->producer_version(), output);
        }

        // optional string domain = 4;
        if (cached_has_bits & 0x00000004u) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                    4, this->domain(), output);
        }

        // optional int64 model_version = 5;
        if (cached_has_bits & 0x00000040u) {
            ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->model_version(), output);
        }

        // optional string doc_string = 6;
        if (cached_has_bits & 0x00000008u) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                    6, this->doc_string(), output);
        }

        // optional .onnx.GraphProto graph = 7;
        if (cached_has_bits & 0x00000010u) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                    7, HasBitSetters::graph(this), output);
        }

        // repeated .onnx.OperatorSetIdProto opset_import = 8;
        for (unsigned int i = 0,
                     n = static_cast<unsigned int>(this->opset_import_size()); i < n; i++) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                    8,
                    this->opset_import(static_cast<int>(i)),
                    output);
        }

        // repeated .onnx.StringStringEntryProto metadata_props = 14;
        for (unsigned int i = 0,
                     n = static_cast<unsigned int>(this->metadata_props_size()); i < n; i++) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                    14,
                    this->metadata_props(static_cast<int>(i)),
                    output);
        }

        output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                         static_cast<int>(_internal_metadata_.unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:onnx.ModelProto)
    }

    size_t ModelProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.ModelProto)
        size_t total_size = 0;

        total_size += _internal_metadata_.unknown_fields().size();

        ::google::protobuf::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void) cached_has_bits;

        // repeated .onnx.OperatorSetIdProto opset_import = 8;
        {
            unsigned int count = static_cast<unsigned int>(this->opset_import_size());
            total_size += 1UL * count;
            for (unsigned int i = 0; i < count; i++) {
                total_size +=
                        ::google::protobuf::internal::WireFormatLite::MessageSize(
                                this->opset_import(static_cast<int>(i)));
            }
        }

        // repeated .onnx.StringStringEntryProto metadata_props = 14;
        {
            unsigned int count = static_cast<unsigned int>(this->metadata_props_size());
            total_size += 1UL * count;
            for (unsigned int i = 0; i < count; i++) {
                total_size +=
                        ::google::protobuf::internal::WireFormatLite::MessageSize(
                                this->metadata_props(static_cast<int>(i)));
            }
        }

        cached_has_bits = _has_bits_[0];
        if (cached_has_bits & 0x0000007fu) {
            // optional string producer_name = 2;
            if (cached_has_bits & 0x00000001u) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->producer_name());
            }

            // optional string producer_version = 3;
            if (cached_has_bits & 0x00000002u) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->producer_version());
            }

            // optional string domain = 4;
            if (cached_has_bits & 0x00000004u) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->domain());
            }

            // optional string doc_string = 6;
            if (cached_has_bits & 0x00000008u) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->doc_string());
            }

            // optional .onnx.GraphProto graph = 7;
            if (cached_has_bits & 0x00000010u) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::MessageSize(
                                      *graph_);
            }

            // optional int64 ir_version = 1;
            if (cached_has_bits & 0x00000020u) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::Int64Size(
                                      this->ir_version());
            }

            // optional int64 model_version = 5;
            if (cached_has_bits & 0x00000040u) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::Int64Size(
                                      this->model_version());
            }

        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
        SetCachedSize(cached_size);
        return total_size;
    }

    void ModelProto::CheckTypeAndMergeFrom(
            const ::google::protobuf::MessageLite& from) {
        MergeFrom(*::google::protobuf::down_cast<const ModelProto*>(&from));
    }

    void ModelProto::MergeFrom(const ModelProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx.ModelProto)
                GOOGLE_DCHECK_NE(&from, this);
        _internal_metadata_.MergeFrom(from._internal_metadata_);
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void) cached_has_bits;

        opset_import_.MergeFrom(from.opset_import_);
        metadata_props_.MergeFrom(from.metadata_props_);
        cached_has_bits = from._has_bits_[0];
        if (cached_has_bits & 0x0000007fu) {
            if (cached_has_bits & 0x00000001u) {
                _has_bits_[0] |= 0x00000001u;
                producer_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.producer_name_);
            }
            if (cached_has_bits & 0x00000002u) {
                _has_bits_[0] |= 0x00000002u;
                producer_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.producer_version_);
            }
            if (cached_has_bits & 0x00000004u) {
                _has_bits_[0] |= 0x00000004u;
                domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
            }
            if (cached_has_bits & 0x00000008u) {
                _has_bits_[0] |= 0x00000008u;
                doc_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.doc_string_);
            }
            if (cached_has_bits & 0x00000010u) {
                mutable_graph()->::onnx::GraphProto::MergeFrom(from.graph());
            }
            if (cached_has_bits & 0x00000020u) {
                ir_version_ = from.ir_version_;
            }
            if (cached_has_bits & 0x00000040u) {
                model_version_ = from.model_version_;
            }
            _has_bits_[0] |= cached_has_bits;
        }
    }

    void ModelProto::CopyFrom(const ModelProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.ModelProto)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool ModelProto::IsInitialized() const {
        return true;
    }

    void ModelProto::Swap(ModelProto* other) {
        if (other == this) return;
        InternalSwap(other);
    }
    void ModelProto::InternalSwap(ModelProto* other) {
        using std::swap;
        _internal_metadata_.Swap(&other->_internal_metadata_);
        swap(_has_bits_[0], other->_has_bits_[0]);
        CastToBase(&opset_import_)->InternalSwap(CastToBase(&other->opset_import_));
        CastToBase(&metadata_props_)->InternalSwap(CastToBase(&other->metadata_props_));
        producer_name_.Swap(&other->producer_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                            GetArenaNoVirtual());
        producer_version_.Swap(&other->producer_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                               GetArenaNoVirtual());
        domain_.Swap(&other->domain_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                     GetArenaNoVirtual());
        doc_string_.Swap(&other->doc_string_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                         GetArenaNoVirtual());
        swap(graph_, other->graph_);
        swap(ir_version_, other->ir_version_);
        swap(model_version_, other->model_version_);
    }

    ::std::string ModelProto::GetTypeName() const {
        return "onnx.ModelProto";
    }


// ===================================================================

    void StringStringEntryProto::InitAsDefaultInstance() {
    }
    class StringStringEntryProto::HasBitSetters {
    public:
        static void set_has_key(StringStringEntryProto* msg) {
            msg->_has_bits_[0] |= 0x00000001u;
        }
        static void set_has_value(StringStringEntryProto* msg) {
            msg->_has_bits_[0] |= 0x00000002u;
        }
    };

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int StringStringEntryProto::kKeyFieldNumber;
    const int StringStringEntryProto::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

    StringStringEntryProto::StringStringEntryProto()
            : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
        SharedCtor();
        // @@protoc_insertion_point(constructor:onnx.StringStringEntryProto)
    }
    StringStringEntryProto::StringStringEntryProto(const StringStringEntryProto& from)
            : ::google::protobuf::MessageLite(),
              _internal_metadata_(nullptr),
              _has_bits_(from._has_bits_) {
        _internal_metadata_.MergeFrom(from._internal_metadata_);
        key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        if (from.has_key()) {
            key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
        }
        value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        if (from.has_value()) {
            value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
        }
        // @@protoc_insertion_point(copy_constructor:onnx.StringStringEntryProto)
    }

    void StringStringEntryProto::SharedCtor() {
        ::google::protobuf::internal::InitSCC(
                &scc_info_StringStringEntryProto_onnx_2eproto.base);
        key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    StringStringEntryProto::~StringStringEntryProto() {
        // @@protoc_insertion_point(destructor:onnx.StringStringEntryProto)
        SharedDtor();
    }

    void StringStringEntryProto::SharedDtor() {
        key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    void StringStringEntryProto::SetCachedSize(int size) const {
        _cached_size_.Set(size);
    }
    const StringStringEntryProto& StringStringEntryProto::default_instance() {
        ::google::protobuf::internal::InitSCC(&::scc_info_StringStringEntryProto_onnx_2eproto.base);
        return *internal_default_instance();
    }


    void StringStringEntryProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.StringStringEntryProto)
        ::google::protobuf::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void) cached_has_bits;

        cached_has_bits = _has_bits_[0];
        if (cached_has_bits & 0x00000003u) {
            if (cached_has_bits & 0x00000001u) {
                key_.ClearNonDefaultToEmptyNoArena();
            }
            if (cached_has_bits & 0x00000002u) {
                value_.ClearNonDefaultToEmptyNoArena();
            }
        }
        _has_bits_.Clear();
        _internal_metadata_.Clear();
    }

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
    const char* StringStringEntryProto::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StringStringEntryProto*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        auto str = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          object = str;
          str->clear();
          str->reserve(size);
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto len_delim_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(str, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        auto str = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          object = str;
          str->clear();
          str->reserve(size);
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto len_delim_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(str, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
    bool StringStringEntryProto::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
                &_internal_metadata_);
        ::google::protobuf::io::StringOutputStream unknown_fields_output(
                unknown_fields_setter.buffer());
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
                &unknown_fields_output, false);
        // @@protoc_insertion_point(parse_start:onnx.StringStringEntryProto)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
            tag = p.first;
            if (!p.second) goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                // optional string key = 1;
                case 1: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                                input, this->mutable_key()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // optional string value = 2;
                case 2: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                                input, this->mutable_value()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                default: {
                    handle_unusual:
                    if (tag == 0) {
                        goto success;
                    }
                    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                            input, tag, &unknown_fields_stream));
                    break;
                }
            }
        }
        success:
        // @@protoc_insertion_point(parse_success:onnx.StringStringEntryProto)
        return true;
        failure:
        // @@protoc_insertion_point(parse_failure:onnx.StringStringEntryProto)
        return false;
#undef DO_
    }
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

    void StringStringEntryProto::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
        // @@protoc_insertion_point(serialize_start:onnx.StringStringEntryProto)
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void) cached_has_bits;

        cached_has_bits = _has_bits_[0];
        // optional string key = 1;
        if (cached_has_bits & 0x00000001u) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                    1, this->key(), output);
        }

        // optional string value = 2;
        if (cached_has_bits & 0x00000002u) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                    2, this->value(), output);
        }

        output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                         static_cast<int>(_internal_metadata_.unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:onnx.StringStringEntryProto)
    }

    size_t StringStringEntryProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.StringStringEntryProto)
        size_t total_size = 0;

        total_size += _internal_metadata_.unknown_fields().size();

        ::google::protobuf::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void) cached_has_bits;

        cached_has_bits = _has_bits_[0];
        if (cached_has_bits & 0x00000003u) {
            // optional string key = 1;
            if (cached_has_bits & 0x00000001u) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->key());
            }

            // optional string value = 2;
            if (cached_has_bits & 0x00000002u) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->value());
            }

        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
        SetCachedSize(cached_size);
        return total_size;
    }

    void StringStringEntryProto::CheckTypeAndMergeFrom(
            const ::google::protobuf::MessageLite& from) {
        MergeFrom(*::google::protobuf::down_cast<const StringStringEntryProto*>(&from));
    }

    void StringStringEntryProto::MergeFrom(const StringStringEntryProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx.StringStringEntryProto)
                GOOGLE_DCHECK_NE(&from, this);
        _internal_metadata_.MergeFrom(from._internal_metadata_);
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void) cached_has_bits;

        cached_has_bits = from._has_bits_[0];
        if (cached_has_bits & 0x00000003u) {
            if (cached_has_bits & 0x00000001u) {
                _has_bits_[0] |= 0x00000001u;
                key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
            }
            if (cached_has_bits & 0x00000002u) {
                _has_bits_[0] |= 0x00000002u;
                value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
            }
        }
    }

    void StringStringEntryProto::CopyFrom(const StringStringEntryProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.StringStringEntryProto)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool StringStringEntryProto::IsInitialized() const {
        return true;
    }

    void StringStringEntryProto::Swap(StringStringEntryProto* other) {
        if (other == this) return;
        InternalSwap(other);
    }
    void StringStringEntryProto::InternalSwap(StringStringEntryProto* other) {
        using std::swap;
        _internal_metadata_.Swap(&other->_internal_metadata_);
        swap(_has_bits_[0], other->_has_bits_[0]);
        key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                  GetArenaNoVirtual());
        value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                    GetArenaNoVirtual());
    }

    ::std::string StringStringEntryProto::GetTypeName() const {
        return "onnx.StringStringEntryProto";
    }


// ===================================================================

    void GraphProto::InitAsDefaultInstance() {
    }
    class GraphProto::HasBitSetters {
    public:
        static void set_has_name(GraphProto* msg) {
            msg->_has_bits_[0] |= 0x00000001u;
        }
        static void set_has_doc_string(GraphProto* msg) {
            msg->_has_bits_[0] |= 0x00000002u;
        }
    };

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int GraphProto::kNodeFieldNumber;
    const int GraphProto::kNameFieldNumber;
    const int GraphProto::kInitializerFieldNumber;
    const int GraphProto::kDocStringFieldNumber;
    const int GraphProto::kInputFieldNumber;
    const int GraphProto::kOutputFieldNumber;
    const int GraphProto::kValueInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

    GraphProto::GraphProto()
            : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
        SharedCtor();
        // @@protoc_insertion_point(constructor:onnx.GraphProto)
    }
    GraphProto::GraphProto(const GraphProto& from)
            : ::google::protobuf::MessageLite(),
              _internal_metadata_(nullptr),
              _has_bits_(from._has_bits_),
              node_(from.node_),
              initializer_(from.initializer_),
              input_(from.input_),
              output_(from.output_),
              value_info_(from.value_info_) {
        _internal_metadata_.MergeFrom(from._internal_metadata_);
        name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        if (from.has_name()) {
            name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
        }
        doc_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        if (from.has_doc_string()) {
            doc_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.doc_string_);
        }
        // @@protoc_insertion_point(copy_constructor:onnx.GraphProto)
    }

    void GraphProto::SharedCtor() {
        ::google::protobuf::internal::InitSCC(
                &scc_info_AttributeProto_onnx_2eproto.base);
        name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        doc_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    GraphProto::~GraphProto() {
        // @@protoc_insertion_point(destructor:onnx.GraphProto)
        SharedDtor();
    }

    void GraphProto::SharedDtor() {
        name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        doc_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    void GraphProto::SetCachedSize(int size) const {
        _cached_size_.Set(size);
    }
    const GraphProto& GraphProto::default_instance() {
        ::google::protobuf::internal::InitSCC(&::scc_info_AttributeProto_onnx_2eproto.base);
        return *internal_default_instance();
    }


    void GraphProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.GraphProto)
        ::google::protobuf::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void) cached_has_bits;

        node_.Clear();
        initializer_.Clear();
        input_.Clear();
        output_.Clear();
        value_info_.Clear();
        cached_has_bits = _has_bits_[0];
        if (cached_has_bits & 0x00000003u) {
            if (cached_has_bits & 0x00000001u) {
                name_.ClearNonDefaultToEmptyNoArena();
            }
            if (cached_has_bits & 0x00000002u) {
                doc_string_.ClearNonDefaultToEmptyNoArena();
            }
        }
        _has_bits_.Clear();
        _internal_metadata_.Clear();
    }

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
    const char* GraphProto::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GraphProto*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .onnx.NodeProto node = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::Parse32(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::onnx::NodeProto::_InternalParse;
          object = msg->add_node();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // optional string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        auto str = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          object = str;
          str->clear();
          str->reserve(size);
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto len_delim_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(str, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .onnx.TensorProto initializer = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::Parse32(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::onnx::TensorProto::_InternalParse;
          object = msg->add_initializer();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // optional string doc_string = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        auto str = msg->mutable_doc_string();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          object = str;
          str->clear();
          str->reserve(size);
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto len_delim_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(str, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .onnx.ValueInfoProto input = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::Parse32(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::onnx::ValueInfoProto::_InternalParse;
          object = msg->add_input();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 90 && (ptr += 1));
        break;
      }
      // repeated .onnx.ValueInfoProto output = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::Parse32(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::onnx::ValueInfoProto::_InternalParse;
          object = msg->add_output();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 98 && (ptr += 1));
        break;
      }
      // repeated .onnx.ValueInfoProto value_info = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::Parse32(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::onnx::ValueInfoProto::_InternalParse;
          object = msg->add_value_info();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 106 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
    bool GraphProto::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
                &_internal_metadata_);
        ::google::protobuf::io::StringOutputStream unknown_fields_output(
                unknown_fields_setter.buffer());
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
                &unknown_fields_output, false);
        // @@protoc_insertion_point(parse_start:onnx.GraphProto)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
            tag = p.first;
            if (!p.second) goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                // repeated .onnx.NodeProto node = 1;
                case 1: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                                input, add_node()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // optional string name = 2;
                case 2: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                                input, this->mutable_name()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // repeated .onnx.TensorProto initializer = 5;
                case 5: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                                input, add_initializer()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // optional string doc_string = 10;
                case 10: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                                input, this->mutable_doc_string()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // repeated .onnx.ValueInfoProto input = 11;
                case 11: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                                input, add_input()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // repeated .onnx.ValueInfoProto output = 12;
                case 12: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                                input, add_output()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // repeated .onnx.ValueInfoProto value_info = 13;
                case 13: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                                input, add_value_info()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                default: {
                    handle_unusual:
                    if (tag == 0) {
                        goto success;
                    }
                    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                            input, tag, &unknown_fields_stream));
                    break;
                }
            }
        }
        success:
        // @@protoc_insertion_point(parse_success:onnx.GraphProto)
        return true;
        failure:
        // @@protoc_insertion_point(parse_failure:onnx.GraphProto)
        return false;
#undef DO_
    }
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

    void GraphProto::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
        // @@protoc_insertion_point(serialize_start:onnx.GraphProto)
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void) cached_has_bits;

        // repeated .onnx.NodeProto node = 1;
        for (unsigned int i = 0,
                     n = static_cast<unsigned int>(this->node_size()); i < n; i++) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                    1,
                    this->node(static_cast<int>(i)),
                    output);
        }

        cached_has_bits = _has_bits_[0];
        // optional string name = 2;
        if (cached_has_bits & 0x00000001u) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                    2, this->name(), output);
        }

        // repeated .onnx.TensorProto initializer = 5;
        for (unsigned int i = 0,
                     n = static_cast<unsigned int>(this->initializer_size()); i < n; i++) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                    5,
                    this->initializer(static_cast<int>(i)),
                    output);
        }

        // optional string doc_string = 10;
        if (cached_has_bits & 0x00000002u) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                    10, this->doc_string(), output);
        }

        // repeated .onnx.ValueInfoProto input = 11;
        for (unsigned int i = 0,
                     n = static_cast<unsigned int>(this->input_size()); i < n; i++) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                    11,
                    this->input(static_cast<int>(i)),
                    output);
        }

        // repeated .onnx.ValueInfoProto output = 12;
        for (unsigned int i = 0,
                     n = static_cast<unsigned int>(this->output_size()); i < n; i++) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                    12,
                    this->output(static_cast<int>(i)),
                    output);
        }

        // repeated .onnx.ValueInfoProto value_info = 13;
        for (unsigned int i = 0,
                     n = static_cast<unsigned int>(this->value_info_size()); i < n; i++) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                    13,
                    this->value_info(static_cast<int>(i)),
                    output);
        }

        output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                         static_cast<int>(_internal_metadata_.unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:onnx.GraphProto)
    }

    size_t GraphProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.GraphProto)
        size_t total_size = 0;

        total_size += _internal_metadata_.unknown_fields().size();

        ::google::protobuf::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void) cached_has_bits;

        // repeated .onnx.NodeProto node = 1;
        {
            unsigned int count = static_cast<unsigned int>(this->node_size());
            total_size += 1UL * count;
            for (unsigned int i = 0; i < count; i++) {
                total_size +=
                        ::google::protobuf::internal::WireFormatLite::MessageSize(
                                this->node(static_cast<int>(i)));
            }
        }

        // repeated .onnx.TensorProto initializer = 5;
        {
            unsigned int count = static_cast<unsigned int>(this->initializer_size());
            total_size += 1UL * count;
            for (unsigned int i = 0; i < count; i++) {
                total_size +=
                        ::google::protobuf::internal::WireFormatLite::MessageSize(
                                this->initializer(static_cast<int>(i)));
            }
        }

        // repeated .onnx.ValueInfoProto input = 11;
        {
            unsigned int count = static_cast<unsigned int>(this->input_size());
            total_size += 1UL * count;
            for (unsigned int i = 0; i < count; i++) {
                total_size +=
                        ::google::protobuf::internal::WireFormatLite::MessageSize(
                                this->input(static_cast<int>(i)));
            }
        }

        // repeated .onnx.ValueInfoProto output = 12;
        {
            unsigned int count = static_cast<unsigned int>(this->output_size());
            total_size += 1UL * count;
            for (unsigned int i = 0; i < count; i++) {
                total_size +=
                        ::google::protobuf::internal::WireFormatLite::MessageSize(
                                this->output(static_cast<int>(i)));
            }
        }

        // repeated .onnx.ValueInfoProto value_info = 13;
        {
            unsigned int count = static_cast<unsigned int>(this->value_info_size());
            total_size += 1UL * count;
            for (unsigned int i = 0; i < count; i++) {
                total_size +=
                        ::google::protobuf::internal::WireFormatLite::MessageSize(
                                this->value_info(static_cast<int>(i)));
            }
        }

        cached_has_bits = _has_bits_[0];
        if (cached_has_bits & 0x00000003u) {
            // optional string name = 2;
            if (cached_has_bits & 0x00000001u) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->name());
            }

            // optional string doc_string = 10;
            if (cached_has_bits & 0x00000002u) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->doc_string());
            }

        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
        SetCachedSize(cached_size);
        return total_size;
    }

    void GraphProto::CheckTypeAndMergeFrom(
            const ::google::protobuf::MessageLite& from) {
        MergeFrom(*::google::protobuf::down_cast<const GraphProto*>(&from));
    }

    void GraphProto::MergeFrom(const GraphProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx.GraphProto)
                GOOGLE_DCHECK_NE(&from, this);
        _internal_metadata_.MergeFrom(from._internal_metadata_);
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void) cached_has_bits;

        node_.MergeFrom(from.node_);
        initializer_.MergeFrom(from.initializer_);
        input_.MergeFrom(from.input_);
        output_.MergeFrom(from.output_);
        value_info_.MergeFrom(from.value_info_);
        cached_has_bits = from._has_bits_[0];
        if (cached_has_bits & 0x00000003u) {
            if (cached_has_bits & 0x00000001u) {
                _has_bits_[0] |= 0x00000001u;
                name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
            }
            if (cached_has_bits & 0x00000002u) {
                _has_bits_[0] |= 0x00000002u;
                doc_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.doc_string_);
            }
        }
    }

    void GraphProto::CopyFrom(const GraphProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.GraphProto)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool GraphProto::IsInitialized() const {
        return true;
    }

    void GraphProto::Swap(GraphProto* other) {
        if (other == this) return;
        InternalSwap(other);
    }
    void GraphProto::InternalSwap(GraphProto* other) {
        using std::swap;
        _internal_metadata_.Swap(&other->_internal_metadata_);
        swap(_has_bits_[0], other->_has_bits_[0]);
        CastToBase(&node_)->InternalSwap(CastToBase(&other->node_));
        CastToBase(&initializer_)->InternalSwap(CastToBase(&other->initializer_));
        CastToBase(&input_)->InternalSwap(CastToBase(&other->input_));
        CastToBase(&output_)->InternalSwap(CastToBase(&other->output_));
        CastToBase(&value_info_)->InternalSwap(CastToBase(&other->value_info_));
        name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                   GetArenaNoVirtual());
        doc_string_.Swap(&other->doc_string_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                         GetArenaNoVirtual());
    }

    ::std::string GraphProto::GetTypeName() const {
        return "onnx.GraphProto";
    }


// ===================================================================

    void TensorProto_Segment::InitAsDefaultInstance() {
    }
    class TensorProto_Segment::HasBitSetters {
    public:
        static void set_has_begin(TensorProto_Segment* msg) {
            msg->_has_bits_[0] |= 0x00000001u;
        }
        static void set_has_end(TensorProto_Segment* msg) {
            msg->_has_bits_[0] |= 0x00000002u;
        }
    };

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int TensorProto_Segment::kBeginFieldNumber;
    const int TensorProto_Segment::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

    TensorProto_Segment::TensorProto_Segment()
            : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
        SharedCtor();
        // @@protoc_insertion_point(constructor:onnx.TensorProto.Segment)
    }
    TensorProto_Segment::TensorProto_Segment(const TensorProto_Segment& from)
            : ::google::protobuf::MessageLite(),
              _internal_metadata_(nullptr),
              _has_bits_(from._has_bits_) {
        _internal_metadata_.MergeFrom(from._internal_metadata_);
        ::memcpy(&begin_, &from.begin_,
                 static_cast<size_t>(reinterpret_cast<char*>(&end_) -
                                     reinterpret_cast<char*>(&begin_)) + sizeof(end_));
        // @@protoc_insertion_point(copy_constructor:onnx.TensorProto.Segment)
    }

    void TensorProto_Segment::SharedCtor() {
        ::memset(&begin_, 0, static_cast<size_t>(
                                     reinterpret_cast<char*>(&end_) -
                                     reinterpret_cast<char*>(&begin_)) + sizeof(end_));
    }

    TensorProto_Segment::~TensorProto_Segment() {
        // @@protoc_insertion_point(destructor:onnx.TensorProto.Segment)
        SharedDtor();
    }

    void TensorProto_Segment::SharedDtor() {
    }

    void TensorProto_Segment::SetCachedSize(int size) const {
        _cached_size_.Set(size);
    }
    const TensorProto_Segment& TensorProto_Segment::default_instance() {
        ::google::protobuf::internal::InitSCC(&::scc_info_TensorProto_Segment_onnx_2eproto.base);
        return *internal_default_instance();
    }


    void TensorProto_Segment::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.TensorProto.Segment)
        ::google::protobuf::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void) cached_has_bits;

        cached_has_bits = _has_bits_[0];
        if (cached_has_bits & 0x00000003u) {
            ::memset(&begin_, 0, static_cast<size_t>(
                                         reinterpret_cast<char*>(&end_) -
                                         reinterpret_cast<char*>(&begin_)) + sizeof(end_));
        }
        _has_bits_.Clear();
        _internal_metadata_.Clear();
    }

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
    const char* TensorProto_Segment::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TensorProto_Segment*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int64 begin = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = ::google::protobuf::io::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_begin(value);
        break;
      }
      // optional int64 end = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = ::google::protobuf::io::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_end(value);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
    bool TensorProto_Segment::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
                &_internal_metadata_);
        ::google::protobuf::io::StringOutputStream unknown_fields_output(
                unknown_fields_setter.buffer());
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
                &unknown_fields_output, false);
        // @@protoc_insertion_point(parse_start:onnx.TensorProto.Segment)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
            tag = p.first;
            if (!p.second) goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                // optional int64 begin = 1;
                case 1: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
                        HasBitSetters::set_has_begin(this);
                        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                                input, &begin_)));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // optional int64 end = 2;
                case 2: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
                        HasBitSetters::set_has_end(this);
                        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                                input, &end_)));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                default: {
                    handle_unusual:
                    if (tag == 0) {
                        goto success;
                    }
                    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                            input, tag, &unknown_fields_stream));
                    break;
                }
            }
        }
        success:
        // @@protoc_insertion_point(parse_success:onnx.TensorProto.Segment)
        return true;
        failure:
        // @@protoc_insertion_point(parse_failure:onnx.TensorProto.Segment)
        return false;
#undef DO_
    }
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

    void TensorProto_Segment::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
        // @@protoc_insertion_point(serialize_start:onnx.TensorProto.Segment)
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void) cached_has_bits;

        cached_has_bits = _has_bits_[0];
        // optional int64 begin = 1;
        if (cached_has_bits & 0x00000001u) {
            ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->begin(), output);
        }

        // optional int64 end = 2;
        if (cached_has_bits & 0x00000002u) {
            ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->end(), output);
        }

        output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                         static_cast<int>(_internal_metadata_.unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:onnx.TensorProto.Segment)
    }

    size_t TensorProto_Segment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.TensorProto.Segment)
        size_t total_size = 0;

        total_size += _internal_metadata_.unknown_fields().size();

        ::google::protobuf::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void) cached_has_bits;

        cached_has_bits = _has_bits_[0];
        if (cached_has_bits & 0x00000003u) {
            // optional int64 begin = 1;
            if (cached_has_bits & 0x00000001u) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::Int64Size(
                                      this->begin());
            }

            // optional int64 end = 2;
            if (cached_has_bits & 0x00000002u) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::Int64Size(
                                      this->end());
            }

        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
        SetCachedSize(cached_size);
        return total_size;
    }

    void TensorProto_Segment::CheckTypeAndMergeFrom(
            const ::google::protobuf::MessageLite& from) {
        MergeFrom(*::google::protobuf::down_cast<const TensorProto_Segment*>(&from));
    }

    void TensorProto_Segment::MergeFrom(const TensorProto_Segment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx.TensorProto.Segment)
                GOOGLE_DCHECK_NE(&from, this);
        _internal_metadata_.MergeFrom(from._internal_metadata_);
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void) cached_has_bits;

        cached_has_bits = from._has_bits_[0];
        if (cached_has_bits & 0x00000003u) {
            if (cached_has_bits & 0x00000001u) {
                begin_ = from.begin_;
            }
            if (cached_has_bits & 0x00000002u) {
                end_ = from.end_;
            }
            _has_bits_[0] |= cached_has_bits;
        }
    }

    void TensorProto_Segment::CopyFrom(const TensorProto_Segment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.TensorProto.Segment)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool TensorProto_Segment::IsInitialized() const {
        return true;
    }

    void TensorProto_Segment::Swap(TensorProto_Segment* other) {
        if (other == this) return;
        InternalSwap(other);
    }
    void TensorProto_Segment::InternalSwap(TensorProto_Segment* other) {
        using std::swap;
        _internal_metadata_.Swap(&other->_internal_metadata_);
        swap(_has_bits_[0], other->_has_bits_[0]);
        swap(begin_, other->begin_);
        swap(end_, other->end_);
    }

    ::std::string TensorProto_Segment::GetTypeName() const {
        return "onnx.TensorProto.Segment";
    }


// ===================================================================

    void TensorProto::InitAsDefaultInstance() {
        ::onnx::_TensorProto_default_instance_._instance.get_mutable()->segment_ = const_cast< ::onnx::TensorProto_Segment*>(
                ::onnx::TensorProto_Segment::internal_default_instance());
    }
    class TensorProto::HasBitSetters {
    public:
        static void set_has_data_type(TensorProto* msg) {
            msg->_has_bits_[0] |= 0x00000010u;
        }
        static const ::onnx::TensorProto_Segment& segment(const TensorProto* msg);
        static void set_has_segment(TensorProto* msg) {
            msg->_has_bits_[0] |= 0x00000008u;
        }
        static void set_has_name(TensorProto* msg) {
            msg->_has_bits_[0] |= 0x00000001u;
        }
        static void set_has_doc_string(TensorProto* msg) {
            msg->_has_bits_[0] |= 0x00000004u;
        }
        static void set_has_raw_data(TensorProto* msg) {
            msg->_has_bits_[0] |= 0x00000002u;
        }
    };

    const ::onnx::TensorProto_Segment&
    TensorProto::HasBitSetters::segment(const TensorProto* msg) {
        return *msg->segment_;
    }
#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int TensorProto::kDimsFieldNumber;
    const int TensorProto::kDataTypeFieldNumber;
    const int TensorProto::kSegmentFieldNumber;
    const int TensorProto::kFloatDataFieldNumber;
    const int TensorProto::kInt32DataFieldNumber;
    const int TensorProto::kStringDataFieldNumber;
    const int TensorProto::kInt64DataFieldNumber;
    const int TensorProto::kNameFieldNumber;
    const int TensorProto::kDocStringFieldNumber;
    const int TensorProto::kRawDataFieldNumber;
    const int TensorProto::kDoubleDataFieldNumber;
    const int TensorProto::kUint64DataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

    TensorProto::TensorProto()
            : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
        SharedCtor();
        // @@protoc_insertion_point(constructor:onnx.TensorProto)
    }
    TensorProto::TensorProto(const TensorProto& from)
            : ::google::protobuf::MessageLite(),
              _internal_metadata_(nullptr),
              _has_bits_(from._has_bits_),
              dims_(from.dims_),
              float_data_(from.float_data_),
              int32_data_(from.int32_data_),
              string_data_(from.string_data_),
              int64_data_(from.int64_data_),
              double_data_(from.double_data_),
              uint64_data_(from.uint64_data_) {
        _internal_metadata_.MergeFrom(from._internal_metadata_);
        name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        if (from.has_name()) {
            name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
        }
        raw_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        if (from.has_raw_data()) {
            raw_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_data_);
        }
        doc_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        if (from.has_doc_string()) {
            doc_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.doc_string_);
        }
        if (from.has_segment()) {
            segment_ = new ::onnx::TensorProto_Segment(*from.segment_);
        } else {
            segment_ = nullptr;
        }
        data_type_ = from.data_type_;
        // @@protoc_insertion_point(copy_constructor:onnx.TensorProto)
    }

    void TensorProto::SharedCtor() {
        ::google::protobuf::internal::InitSCC(
                &scc_info_TensorProto_onnx_2eproto.base);
        name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        raw_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        doc_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        ::memset(&segment_, 0, static_cast<size_t>(
                                       reinterpret_cast<char*>(&data_type_) -
                                       reinterpret_cast<char*>(&segment_)) + sizeof(data_type_));
    }

    TensorProto::~TensorProto() {
        // @@protoc_insertion_point(destructor:onnx.TensorProto)
        SharedDtor();
    }

    void TensorProto::SharedDtor() {
        name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        raw_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        doc_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        if (this != internal_default_instance()) delete segment_;
    }

    void TensorProto::SetCachedSize(int size) const {
        _cached_size_.Set(size);
    }
    const TensorProto& TensorProto::default_instance() {
        ::google::protobuf::internal::InitSCC(&::scc_info_TensorProto_onnx_2eproto.base);
        return *internal_default_instance();
    }


    void TensorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.TensorProto)
        ::google::protobuf::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void) cached_has_bits;

        dims_.Clear();
        float_data_.Clear();
        int32_data_.Clear();
        string_data_.Clear();
        int64_data_.Clear();
        double_data_.Clear();
        uint64_data_.Clear();
        cached_has_bits = _has_bits_[0];
        if (cached_has_bits & 0x0000000fu) {
            if (cached_has_bits & 0x00000001u) {
                name_.ClearNonDefaultToEmptyNoArena();
            }
            if (cached_has_bits & 0x00000002u) {
                raw_data_.ClearNonDefaultToEmptyNoArena();
            }
            if (cached_has_bits & 0x00000004u) {
                doc_string_.ClearNonDefaultToEmptyNoArena();
            }
            if (cached_has_bits & 0x00000008u) {
                        GOOGLE_DCHECK(segment_ != nullptr);
                segment_->Clear();
            }
        }
        data_type_ = 0;
        _has_bits_.Clear();
        _internal_metadata_.Clear();
    }

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
    const char* TensorProto::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TensorProto*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated int64 dims = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            ::google::protobuf::uint64 val;
            ptr = ::google::protobuf::io::Parse64(ptr, &val);
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            ::google::protobuf::int64 value = val;
            msg->add_dims(value);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedInt64Parser;
        object = msg->mutable_dims();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional int32 data_type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = ::google::protobuf::io::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_data_type(value);
        break;
      }
      // optional .onnx.TensorProto.Segment segment = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::onnx::TensorProto_Segment::_InternalParse;
        object = msg->mutable_segment();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // repeated float float_data = 4 [packed = true];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 34) {
          ptr = ::google::protobuf::io::Parse32(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedFloatParser;
          object = msg->mutable_float_data();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        do {
          float val;
          std::memcpy(&val, ptr, 4);
          ptr += 4;
          msg->add_float_data(val);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 37 && (ptr += 1));
        break;
      }
      // repeated int32 int32_data = 5 [packed = true];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) == 42) {
          ptr = ::google::protobuf::io::Parse32(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_int32_data();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val;
          ptr = ::google::protobuf::io::Parse64(ptr, &val);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ::google::protobuf::int32 value = val;
          msg->add_int32_data(value);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 40 && (ptr += 1));
        break;
      }
      // repeated bytes string_data = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::Parse32(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          auto str = msg->add_string_data();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            object = str;
            str->clear();
            str->reserve(size);
            parser_till_end = ::google::protobuf::internal::GreedyStringParser;
            goto len_delim_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(str, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // repeated int64 int64_data = 7 [packed = true];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) == 58) {
          ptr = ::google::protobuf::io::Parse32(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt64Parser;
          object = msg->mutable_int64_data();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val;
          ptr = ::google::protobuf::io::Parse64(ptr, &val);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ::google::protobuf::int64 value = val;
          msg->add_int64_data(value);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 56 && (ptr += 1));
        break;
      }
      // optional string name = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        auto str = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          object = str;
          str->clear();
          str->reserve(size);
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto len_delim_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(str, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes raw_data = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        auto str = msg->mutable_raw_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          object = str;
          str->clear();
          str->reserve(size);
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto len_delim_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(str, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated double double_data = 10 [packed = true];
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) == 82) {
          ptr = ::google::protobuf::io::Parse32(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedDoubleParser;
          object = msg->mutable_double_data();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 81) goto handle_unusual;
        do {
          double val;
          ::std::memcpy(&val, ptr, 8);
          ptr += 8;
          msg->add_double_data(val);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 81 && (ptr += 1));
        break;
      }
      // repeated uint64 uint64_data = 11 [packed = true];
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) == 90) {
          ptr = ::google::protobuf::io::Parse32(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedUInt64Parser;
          object = msg->mutable_uint64_data();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val;
          ptr = ::google::protobuf::io::Parse64(ptr, &val);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ::google::protobuf::uint64 value = val;
          msg->add_uint64_data(value);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 88 && (ptr += 1));
        break;
      }
      // optional string doc_string = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        auto str = msg->mutable_doc_string();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          object = str;
          str->clear();
          str->reserve(size);
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto len_delim_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(str, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
    bool TensorProto::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
                &_internal_metadata_);
        ::google::protobuf::io::StringOutputStream unknown_fields_output(
                unknown_fields_setter.buffer());
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
                &unknown_fields_output, false);
        // @@protoc_insertion_point(parse_start:onnx.TensorProto)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
            tag = p.first;
            if (!p.second) goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                // repeated int64 dims = 1;
                case 1: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
                        DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                                ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                                1, 8u, input, this->mutable_dims())));
                    } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
                        DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                                ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                                input, this->mutable_dims())));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // optional int32 data_type = 2;
                case 2: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
                        HasBitSetters::set_has_data_type(this);
                        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &data_type_)));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // optional .onnx.TensorProto.Segment segment = 3;
                case 3: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                                input, mutable_segment()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // repeated float float_data = 4 [packed = true];
                case 4: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
                        DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                                float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                                input, this->mutable_float_data())));
                    } else if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
                        DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                                float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                                1, 34u, input, this->mutable_float_data())));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // repeated int32 int32_data = 5 [packed = true];
                case 5: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
                        DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, this->mutable_int32_data())));
                    } else if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
                        DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                1, 42u, input, this->mutable_int32_data())));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // repeated bytes string_data = 6;
                case 6: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                                input, this->add_string_data()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // repeated int64 int64_data = 7 [packed = true];
                case 7: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
                        DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                                ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                                input, this->mutable_int64_data())));
                    } else if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
                        DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                                ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                                1, 58u, input, this->mutable_int64_data())));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // optional string name = 8;
                case 8: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                                input, this->mutable_name()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // optional bytes raw_data = 9;
                case 9: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                                input, this->mutable_raw_data()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // repeated double double_data = 10 [packed = true];
                case 10: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
                        DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                                double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                                input, this->mutable_double_data())));
                    } else if (static_cast< ::google::protobuf::uint8>(tag) == (81 & 0xFF)) {
                        DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                                double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                                1, 82u, input, this->mutable_double_data())));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // repeated uint64 uint64_data = 11 [packed = true];
                case 11: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
                        DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                                ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                                input, this->mutable_uint64_data())));
                    } else if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
                        DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                                ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                                1, 90u, input, this->mutable_uint64_data())));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // optional string doc_string = 12;
                case 12: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                                input, this->mutable_doc_string()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                default: {
                    handle_unusual:
                    if (tag == 0) {
                        goto success;
                    }
                    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                            input, tag, &unknown_fields_stream));
                    break;
                }
            }
        }
        success:
        // @@protoc_insertion_point(parse_success:onnx.TensorProto)
        return true;
        failure:
        // @@protoc_insertion_point(parse_failure:onnx.TensorProto)
        return false;
#undef DO_
    }
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

    void TensorProto::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
        // @@protoc_insertion_point(serialize_start:onnx.TensorProto)
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void) cached_has_bits;

        // repeated int64 dims = 1;
        for (int i = 0, n = this->dims_size(); i < n; i++) {
            ::google::protobuf::internal::WireFormatLite::WriteInt64(
                    1, this->dims(i), output);
        }

        cached_has_bits = _has_bits_[0];
        // optional int32 data_type = 2;
        if (cached_has_bits & 0x00000010u) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->data_type(), output);
        }

        // optional .onnx.TensorProto.Segment segment = 3;
        if (cached_has_bits & 0x00000008u) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                    3, HasBitSetters::segment(this), output);
        }

        // repeated float float_data = 4 [packed = true];
        if (this->float_data_size() > 0) {
            ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
            output->WriteVarint32(_float_data_cached_byte_size_.load(
                    std::memory_order_relaxed));
            ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
                    this->float_data().data(), this->float_data_size(), output);
        }

        // repeated int32 int32_data = 5 [packed = true];
        if (this->int32_data_size() > 0) {
            ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
            output->WriteVarint32(_int32_data_cached_byte_size_.load(
                    std::memory_order_relaxed));
        }
        for (int i = 0, n = this->int32_data_size(); i < n; i++) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
                    this->int32_data(i), output);
        }

        // repeated bytes string_data = 6;
        for (int i = 0, n = this->string_data_size(); i < n; i++) {
            ::google::protobuf::internal::WireFormatLite::WriteBytes(
                    6, this->string_data(i), output);
        }

        // repeated int64 int64_data = 7 [packed = true];
        if (this->int64_data_size() > 0) {
            ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
            output->WriteVarint32(_int64_data_cached_byte_size_.load(
                    std::memory_order_relaxed));
        }
        for (int i = 0, n = this->int64_data_size(); i < n; i++) {
            ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
                    this->int64_data(i), output);
        }

        // optional string name = 8;
        if (cached_has_bits & 0x00000001u) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                    8, this->name(), output);
        }

        // optional bytes raw_data = 9;
        if (cached_has_bits & 0x00000002u) {
            ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
                    9, this->raw_data(), output);
        }

        // repeated double double_data = 10 [packed = true];
        if (this->double_data_size() > 0) {
            ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
            output->WriteVarint32(_double_data_cached_byte_size_.load(
                    std::memory_order_relaxed));
            ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
                    this->double_data().data(), this->double_data_size(), output);
        }

        // repeated uint64 uint64_data = 11 [packed = true];
        if (this->uint64_data_size() > 0) {
            ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
            output->WriteVarint32(_uint64_data_cached_byte_size_.load(
                    std::memory_order_relaxed));
        }
        for (int i = 0, n = this->uint64_data_size(); i < n; i++) {
            ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
                    this->uint64_data(i), output);
        }

        // optional string doc_string = 12;
        if (cached_has_bits & 0x00000004u) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                    12, this->doc_string(), output);
        }

        output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                         static_cast<int>(_internal_metadata_.unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:onnx.TensorProto)
    }

    size_t TensorProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.TensorProto)
        size_t total_size = 0;

        total_size += _internal_metadata_.unknown_fields().size();

        ::google::protobuf::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void) cached_has_bits;

        // repeated int64 dims = 1;
        {
            size_t data_size = ::google::protobuf::internal::WireFormatLite::
            Int64Size(this->dims_);
            total_size += 1 *
                          ::google::protobuf::internal::FromIntSize(this->dims_size());
            total_size += data_size;
        }

        // repeated float float_data = 4 [packed = true];
        {
            unsigned int count = static_cast<unsigned int>(this->float_data_size());
            size_t data_size = 4UL * count;
            if (data_size > 0) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::Int32Size(
                                      static_cast<::google::protobuf::int32>(data_size));
            }
            int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
            _float_data_cached_byte_size_.store(cached_size,
                                                std::memory_order_relaxed);
            total_size += data_size;
        }

        // repeated int32 int32_data = 5 [packed = true];
        {
            size_t data_size = ::google::protobuf::internal::WireFormatLite::
            Int32Size(this->int32_data_);
            if (data_size > 0) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::Int32Size(
                                      static_cast<::google::protobuf::int32>(data_size));
            }
            int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
            _int32_data_cached_byte_size_.store(cached_size,
                                                std::memory_order_relaxed);
            total_size += data_size;
        }

        // repeated bytes string_data = 6;
        total_size += 1 *
                      ::google::protobuf::internal::FromIntSize(this->string_data_size());
        for (int i = 0, n = this->string_data_size(); i < n; i++) {
            total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
                    this->string_data(i));
        }

        // repeated int64 int64_data = 7 [packed = true];
        {
            size_t data_size = ::google::protobuf::internal::WireFormatLite::
            Int64Size(this->int64_data_);
            if (data_size > 0) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::Int32Size(
                                      static_cast<::google::protobuf::int32>(data_size));
            }
            int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
            _int64_data_cached_byte_size_.store(cached_size,
                                                std::memory_order_relaxed);
            total_size += data_size;
        }

        // repeated double double_data = 10 [packed = true];
        {
            unsigned int count = static_cast<unsigned int>(this->double_data_size());
            size_t data_size = 8UL * count;
            if (data_size > 0) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::Int32Size(
                                      static_cast<::google::protobuf::int32>(data_size));
            }
            int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
            _double_data_cached_byte_size_.store(cached_size,
                                                 std::memory_order_relaxed);
            total_size += data_size;
        }

        // repeated uint64 uint64_data = 11 [packed = true];
        {
            size_t data_size = ::google::protobuf::internal::WireFormatLite::
            UInt64Size(this->uint64_data_);
            if (data_size > 0) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::Int32Size(
                                      static_cast<::google::protobuf::int32>(data_size));
            }
            int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
            _uint64_data_cached_byte_size_.store(cached_size,
                                                 std::memory_order_relaxed);
            total_size += data_size;
        }

        cached_has_bits = _has_bits_[0];
        if (cached_has_bits & 0x0000001fu) {
            // optional string name = 8;
            if (cached_has_bits & 0x00000001u) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->name());
            }

            // optional bytes raw_data = 9;
            if (cached_has_bits & 0x00000002u) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->raw_data());
            }

            // optional string doc_string = 12;
            if (cached_has_bits & 0x00000004u) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->doc_string());
            }

            // optional .onnx.TensorProto.Segment segment = 3;
            if (cached_has_bits & 0x00000008u) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::MessageSize(
                                      *segment_);
            }

            // optional int32 data_type = 2;
            if (cached_has_bits & 0x00000010u) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::Int32Size(
                                      this->data_type());
            }

        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
        SetCachedSize(cached_size);
        return total_size;
    }

    void TensorProto::CheckTypeAndMergeFrom(
            const ::google::protobuf::MessageLite& from) {
        MergeFrom(*::google::protobuf::down_cast<const TensorProto*>(&from));
    }

    void TensorProto::MergeFrom(const TensorProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx.TensorProto)
                GOOGLE_DCHECK_NE(&from, this);
        _internal_metadata_.MergeFrom(from._internal_metadata_);
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void) cached_has_bits;

        dims_.MergeFrom(from.dims_);
        float_data_.MergeFrom(from.float_data_);
        int32_data_.MergeFrom(from.int32_data_);
        string_data_.MergeFrom(from.string_data_);
        int64_data_.MergeFrom(from.int64_data_);
        double_data_.MergeFrom(from.double_data_);
        uint64_data_.MergeFrom(from.uint64_data_);
        cached_has_bits = from._has_bits_[0];
        if (cached_has_bits & 0x0000001fu) {
            if (cached_has_bits & 0x00000001u) {
                _has_bits_[0] |= 0x00000001u;
                name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
            }
            if (cached_has_bits & 0x00000002u) {
                _has_bits_[0] |= 0x00000002u;
                raw_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_data_);
            }
            if (cached_has_bits & 0x00000004u) {
                _has_bits_[0] |= 0x00000004u;
                doc_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.doc_string_);
            }
            if (cached_has_bits & 0x00000008u) {
                mutable_segment()->::onnx::TensorProto_Segment::MergeFrom(from.segment());
            }
            if (cached_has_bits & 0x00000010u) {
                data_type_ = from.data_type_;
            }
            _has_bits_[0] |= cached_has_bits;
        }
    }

    void TensorProto::CopyFrom(const TensorProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.TensorProto)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool TensorProto::IsInitialized() const {
        return true;
    }

    void TensorProto::Swap(TensorProto* other) {
        if (other == this) return;
        InternalSwap(other);
    }
    void TensorProto::InternalSwap(TensorProto* other) {
        using std::swap;
        _internal_metadata_.Swap(&other->_internal_metadata_);
        swap(_has_bits_[0], other->_has_bits_[0]);
        dims_.InternalSwap(&other->dims_);
        float_data_.InternalSwap(&other->float_data_);
        int32_data_.InternalSwap(&other->int32_data_);
        string_data_.InternalSwap(CastToBase(&other->string_data_));
        int64_data_.InternalSwap(&other->int64_data_);
        double_data_.InternalSwap(&other->double_data_);
        uint64_data_.InternalSwap(&other->uint64_data_);
        name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                   GetArenaNoVirtual());
        raw_data_.Swap(&other->raw_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                       GetArenaNoVirtual());
        doc_string_.Swap(&other->doc_string_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                         GetArenaNoVirtual());
        swap(segment_, other->segment_);
        swap(data_type_, other->data_type_);
    }

    ::std::string TensorProto::GetTypeName() const {
        return "onnx.TensorProto";
    }


// ===================================================================

    void TensorShapeProto_Dimension::InitAsDefaultInstance() {
    }
    class TensorShapeProto_Dimension::HasBitSetters {
    public:
        static void set_has_denotation(TensorShapeProto_Dimension* msg) {
            msg->_has_bits_[0] |= 0x00000001u;
        }
    };

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int TensorShapeProto_Dimension::kDimValueFieldNumber;
    const int TensorShapeProto_Dimension::kDimParamFieldNumber;
    const int TensorShapeProto_Dimension::kDenotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

    TensorShapeProto_Dimension::TensorShapeProto_Dimension()
            : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
        SharedCtor();
        // @@protoc_insertion_point(constructor:onnx.TensorShapeProto.Dimension)
    }
    TensorShapeProto_Dimension::TensorShapeProto_Dimension(const TensorShapeProto_Dimension& from)
            : ::google::protobuf::MessageLite(),
              _internal_metadata_(nullptr),
              _has_bits_(from._has_bits_) {
        _internal_metadata_.MergeFrom(from._internal_metadata_);
        denotation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        if (from.has_denotation()) {
            denotation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.denotation_);
        }
        clear_has_value();
        switch (from.value_case()) {
            case kDimValue: {
                set_dim_value(from.dim_value());
                break;
            }
            case kDimParam: {
                set_dim_param(from.dim_param());
                break;
            }
            case VALUE_NOT_SET: {
                break;
            }
        }
        // @@protoc_insertion_point(copy_constructor:onnx.TensorShapeProto.Dimension)
    }

    void TensorShapeProto_Dimension::SharedCtor() {
        ::google::protobuf::internal::InitSCC(
                &scc_info_TensorShapeProto_Dimension_onnx_2eproto.base);
        denotation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_value();
    }

    TensorShapeProto_Dimension::~TensorShapeProto_Dimension() {
        // @@protoc_insertion_point(destructor:onnx.TensorShapeProto.Dimension)
        SharedDtor();
    }

    void TensorShapeProto_Dimension::SharedDtor() {
        denotation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        if (has_value()) {
            clear_value();
        }
    }

    void TensorShapeProto_Dimension::SetCachedSize(int size) const {
        _cached_size_.Set(size);
    }
    const TensorShapeProto_Dimension& TensorShapeProto_Dimension::default_instance() {
        ::google::protobuf::internal::InitSCC(&::scc_info_TensorShapeProto_Dimension_onnx_2eproto.base);
        return *internal_default_instance();
    }


    void TensorShapeProto_Dimension::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:onnx.TensorShapeProto.Dimension)
        switch (value_case()) {
            case kDimValue: {
                // No need to clear
                break;
            }
            case kDimParam: {
                value_.dim_param_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
                break;
            }
            case VALUE_NOT_SET: {
                break;
            }
        }
        _oneof_case_[0] = VALUE_NOT_SET;
    }


    void TensorShapeProto_Dimension::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.TensorShapeProto.Dimension)
        ::google::protobuf::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void) cached_has_bits;

        cached_has_bits = _has_bits_[0];
        if (cached_has_bits & 0x00000001u) {
            denotation_.ClearNonDefaultToEmptyNoArena();
        }
        clear_value();
        _has_bits_.Clear();
        _internal_metadata_.Clear();
    }

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
    const char* TensorShapeProto_Dimension::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TensorShapeProto_Dimension*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int64 dim_value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = ::google::protobuf::io::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_dim_value(value);
        break;
      }
      // optional string dim_param = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        auto str = msg->mutable_dim_param();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          object = str;
          str->clear();
          str->reserve(size);
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto len_delim_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(str, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string denotation = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        auto str = msg->mutable_denotation();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          object = str;
          str->clear();
          str->reserve(size);
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto len_delim_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(str, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
    bool TensorShapeProto_Dimension::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
                &_internal_metadata_);
        ::google::protobuf::io::StringOutputStream unknown_fields_output(
                unknown_fields_setter.buffer());
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
                &unknown_fields_output, false);
        // @@protoc_insertion_point(parse_start:onnx.TensorShapeProto.Dimension)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
            tag = p.first;
            if (!p.second) goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                // optional int64 dim_value = 1;
                case 1: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
                        clear_value();
                        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                                input, &value_.dim_value_)));
                        set_has_dim_value();
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // optional string dim_param = 2;
                case 2: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                                input, this->mutable_dim_param()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // optional string denotation = 3;
                case 3: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                                input, this->mutable_denotation()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                default: {
                    handle_unusual:
                    if (tag == 0) {
                        goto success;
                    }
                    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                            input, tag, &unknown_fields_stream));
                    break;
                }
            }
        }
        success:
        // @@protoc_insertion_point(parse_success:onnx.TensorShapeProto.Dimension)
        return true;
        failure:
        // @@protoc_insertion_point(parse_failure:onnx.TensorShapeProto.Dimension)
        return false;
#undef DO_
    }
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

    void TensorShapeProto_Dimension::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
        // @@protoc_insertion_point(serialize_start:onnx.TensorShapeProto.Dimension)
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void) cached_has_bits;

        switch (value_case()) {
            case kDimValue:
                ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dim_value(), output);
                break;
            case kDimParam:
                ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                        2, this->dim_param(), output);
                break;
            default: ;
        }
        cached_has_bits = _has_bits_[0];
        // optional string denotation = 3;
        if (cached_has_bits & 0x00000001u) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                    3, this->denotation(), output);
        }

        output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                         static_cast<int>(_internal_metadata_.unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:onnx.TensorShapeProto.Dimension)
    }

    size_t TensorShapeProto_Dimension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.TensorShapeProto.Dimension)
        size_t total_size = 0;

        total_size += _internal_metadata_.unknown_fields().size();

        ::google::protobuf::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void) cached_has_bits;

        // optional string denotation = 3;
        cached_has_bits = _has_bits_[0];
        if (cached_has_bits & 0x00000001u) {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                                  this->denotation());
        }

        switch (value_case()) {
            // optional int64 dim_value = 1;
            case kDimValue: {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::Int64Size(
                                      this->dim_value());
                break;
            }
                // optional string dim_param = 2;
            case kDimParam: {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->dim_param());
                break;
            }
            case VALUE_NOT_SET: {
                break;
            }
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
        SetCachedSize(cached_size);
        return total_size;
    }

    void TensorShapeProto_Dimension::CheckTypeAndMergeFrom(
            const ::google::protobuf::MessageLite& from) {
        MergeFrom(*::google::protobuf::down_cast<const TensorShapeProto_Dimension*>(&from));
    }

    void TensorShapeProto_Dimension::MergeFrom(const TensorShapeProto_Dimension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx.TensorShapeProto.Dimension)
                GOOGLE_DCHECK_NE(&from, this);
        _internal_metadata_.MergeFrom(from._internal_metadata_);
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void) cached_has_bits;

        if (from.has_denotation()) {
            _has_bits_[0] |= 0x00000001u;
            denotation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.denotation_);
        }
        switch (from.value_case()) {
            case kDimValue: {
                set_dim_value(from.dim_value());
                break;
            }
            case kDimParam: {
                set_dim_param(from.dim_param());
                break;
            }
            case VALUE_NOT_SET: {
                break;
            }
        }
    }

    void TensorShapeProto_Dimension::CopyFrom(const TensorShapeProto_Dimension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.TensorShapeProto.Dimension)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool TensorShapeProto_Dimension::IsInitialized() const {
        return true;
    }

    void TensorShapeProto_Dimension::Swap(TensorShapeProto_Dimension* other) {
        if (other == this) return;
        InternalSwap(other);
    }
    void TensorShapeProto_Dimension::InternalSwap(TensorShapeProto_Dimension* other) {
        using std::swap;
        _internal_metadata_.Swap(&other->_internal_metadata_);
        swap(_has_bits_[0], other->_has_bits_[0]);
        denotation_.Swap(&other->denotation_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                         GetArenaNoVirtual());
        swap(value_, other->value_);
        swap(_oneof_case_[0], other->_oneof_case_[0]);
    }

    ::std::string TensorShapeProto_Dimension::GetTypeName() const {
        return "onnx.TensorShapeProto.Dimension";
    }


// ===================================================================

    void TensorShapeProto::InitAsDefaultInstance() {
    }
    class TensorShapeProto::HasBitSetters {
    public:
    };

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int TensorShapeProto::kDimFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

    TensorShapeProto::TensorShapeProto()
            : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
        SharedCtor();
        // @@protoc_insertion_point(constructor:onnx.TensorShapeProto)
    }
    TensorShapeProto::TensorShapeProto(const TensorShapeProto& from)
            : ::google::protobuf::MessageLite(),
              _internal_metadata_(nullptr),
              _has_bits_(from._has_bits_),
              dim_(from.dim_) {
        _internal_metadata_.MergeFrom(from._internal_metadata_);
        // @@protoc_insertion_point(copy_constructor:onnx.TensorShapeProto)
    }

    void TensorShapeProto::SharedCtor() {
        ::google::protobuf::internal::InitSCC(
                &scc_info_TensorShapeProto_onnx_2eproto.base);
    }

    TensorShapeProto::~TensorShapeProto() {
        // @@protoc_insertion_point(destructor:onnx.TensorShapeProto)
        SharedDtor();
    }

    void TensorShapeProto::SharedDtor() {
    }

    void TensorShapeProto::SetCachedSize(int size) const {
        _cached_size_.Set(size);
    }
    const TensorShapeProto& TensorShapeProto::default_instance() {
        ::google::protobuf::internal::InitSCC(&::scc_info_TensorShapeProto_onnx_2eproto.base);
        return *internal_default_instance();
    }


    void TensorShapeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.TensorShapeProto)
        ::google::protobuf::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void) cached_has_bits;

        dim_.Clear();
        _has_bits_.Clear();
        _internal_metadata_.Clear();
    }

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
    const char* TensorShapeProto::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TensorShapeProto*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .onnx.TensorShapeProto.Dimension dim = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::Parse32(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::onnx::TensorShapeProto_Dimension::_InternalParse;
          object = msg->add_dim();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
    bool TensorShapeProto::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
                &_internal_metadata_);
        ::google::protobuf::io::StringOutputStream unknown_fields_output(
                unknown_fields_setter.buffer());
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
                &unknown_fields_output, false);
        // @@protoc_insertion_point(parse_start:onnx.TensorShapeProto)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
            tag = p.first;
            if (!p.second) goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                // repeated .onnx.TensorShapeProto.Dimension dim = 1;
                case 1: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                                input, add_dim()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                default: {
                    handle_unusual:
                    if (tag == 0) {
                        goto success;
                    }
                    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                            input, tag, &unknown_fields_stream));
                    break;
                }
            }
        }
        success:
        // @@protoc_insertion_point(parse_success:onnx.TensorShapeProto)
        return true;
        failure:
        // @@protoc_insertion_point(parse_failure:onnx.TensorShapeProto)
        return false;
#undef DO_
    }
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

    void TensorShapeProto::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
        // @@protoc_insertion_point(serialize_start:onnx.TensorShapeProto)
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void) cached_has_bits;

        // repeated .onnx.TensorShapeProto.Dimension dim = 1;
        for (unsigned int i = 0,
                     n = static_cast<unsigned int>(this->dim_size()); i < n; i++) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                    1,
                    this->dim(static_cast<int>(i)),
                    output);
        }

        output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                         static_cast<int>(_internal_metadata_.unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:onnx.TensorShapeProto)
    }

    size_t TensorShapeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.TensorShapeProto)
        size_t total_size = 0;

        total_size += _internal_metadata_.unknown_fields().size();

        ::google::protobuf::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void) cached_has_bits;

        // repeated .onnx.TensorShapeProto.Dimension dim = 1;
        {
            unsigned int count = static_cast<unsigned int>(this->dim_size());
            total_size += 1UL * count;
            for (unsigned int i = 0; i < count; i++) {
                total_size +=
                        ::google::protobuf::internal::WireFormatLite::MessageSize(
                                this->dim(static_cast<int>(i)));
            }
        }

        int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
        SetCachedSize(cached_size);
        return total_size;
    }

    void TensorShapeProto::CheckTypeAndMergeFrom(
            const ::google::protobuf::MessageLite& from) {
        MergeFrom(*::google::protobuf::down_cast<const TensorShapeProto*>(&from));
    }

    void TensorShapeProto::MergeFrom(const TensorShapeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx.TensorShapeProto)
                GOOGLE_DCHECK_NE(&from, this);
        _internal_metadata_.MergeFrom(from._internal_metadata_);
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void) cached_has_bits;

        dim_.MergeFrom(from.dim_);
    }

    void TensorShapeProto::CopyFrom(const TensorShapeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.TensorShapeProto)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool TensorShapeProto::IsInitialized() const {
        return true;
    }

    void TensorShapeProto::Swap(TensorShapeProto* other) {
        if (other == this) return;
        InternalSwap(other);
    }
    void TensorShapeProto::InternalSwap(TensorShapeProto* other) {
        using std::swap;
        _internal_metadata_.Swap(&other->_internal_metadata_);
        swap(_has_bits_[0], other->_has_bits_[0]);
        CastToBase(&dim_)->InternalSwap(CastToBase(&other->dim_));
    }

    ::std::string TensorShapeProto::GetTypeName() const {
        return "onnx.TensorShapeProto";
    }


// ===================================================================

    void TypeProto_Tensor::InitAsDefaultInstance() {
        ::onnx::_TypeProto_Tensor_default_instance_._instance.get_mutable()->shape_ = const_cast< ::onnx::TensorShapeProto*>(
                ::onnx::TensorShapeProto::internal_default_instance());
    }
    class TypeProto_Tensor::HasBitSetters {
    public:
        static void set_has_elem_type(TypeProto_Tensor* msg) {
            msg->_has_bits_[0] |= 0x00000002u;
        }
        static const ::onnx::TensorShapeProto& shape(const TypeProto_Tensor* msg);
        static void set_has_shape(TypeProto_Tensor* msg) {
            msg->_has_bits_[0] |= 0x00000001u;
        }
    };

    const ::onnx::TensorShapeProto&
    TypeProto_Tensor::HasBitSetters::shape(const TypeProto_Tensor* msg) {
        return *msg->shape_;
    }
#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int TypeProto_Tensor::kElemTypeFieldNumber;
    const int TypeProto_Tensor::kShapeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

    TypeProto_Tensor::TypeProto_Tensor()
            : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
        SharedCtor();
        // @@protoc_insertion_point(constructor:onnx.TypeProto.Tensor)
    }
    TypeProto_Tensor::TypeProto_Tensor(const TypeProto_Tensor& from)
            : ::google::protobuf::MessageLite(),
              _internal_metadata_(nullptr),
              _has_bits_(from._has_bits_) {
        _internal_metadata_.MergeFrom(from._internal_metadata_);
        if (from.has_shape()) {
            shape_ = new ::onnx::TensorShapeProto(*from.shape_);
        } else {
            shape_ = nullptr;
        }
        elem_type_ = from.elem_type_;
        // @@protoc_insertion_point(copy_constructor:onnx.TypeProto.Tensor)
    }

    void TypeProto_Tensor::SharedCtor() {
        ::google::protobuf::internal::InitSCC(
                &scc_info_TypeProto_Tensor_onnx_2eproto.base);
        ::memset(&shape_, 0, static_cast<size_t>(
                                     reinterpret_cast<char*>(&elem_type_) -
                                     reinterpret_cast<char*>(&shape_)) + sizeof(elem_type_));
    }

    TypeProto_Tensor::~TypeProto_Tensor() {
        // @@protoc_insertion_point(destructor:onnx.TypeProto.Tensor)
        SharedDtor();
    }

    void TypeProto_Tensor::SharedDtor() {
        if (this != internal_default_instance()) delete shape_;
    }

    void TypeProto_Tensor::SetCachedSize(int size) const {
        _cached_size_.Set(size);
    }
    const TypeProto_Tensor& TypeProto_Tensor::default_instance() {
        ::google::protobuf::internal::InitSCC(&::scc_info_TypeProto_Tensor_onnx_2eproto.base);
        return *internal_default_instance();
    }


    void TypeProto_Tensor::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.TypeProto.Tensor)
        ::google::protobuf::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void) cached_has_bits;

        cached_has_bits = _has_bits_[0];
        if (cached_has_bits & 0x00000001u) {
                    GOOGLE_DCHECK(shape_ != nullptr);
            shape_->Clear();
        }
        elem_type_ = 0;
        _has_bits_.Clear();
        _internal_metadata_.Clear();
    }

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
    const char* TypeProto_Tensor::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TypeProto_Tensor*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 elem_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = ::google::protobuf::io::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_elem_type(value);
        break;
      }
      // optional .onnx.TensorShapeProto shape = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::onnx::TensorShapeProto::_InternalParse;
        object = msg->mutable_shape();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
    bool TypeProto_Tensor::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
                &_internal_metadata_);
        ::google::protobuf::io::StringOutputStream unknown_fields_output(
                unknown_fields_setter.buffer());
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
                &unknown_fields_output, false);
        // @@protoc_insertion_point(parse_start:onnx.TypeProto.Tensor)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
            tag = p.first;
            if (!p.second) goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                // optional int32 elem_type = 1;
                case 1: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
                        HasBitSetters::set_has_elem_type(this);
                        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &elem_type_)));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // optional .onnx.TensorShapeProto shape = 2;
                case 2: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                                input, mutable_shape()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                default: {
                    handle_unusual:
                    if (tag == 0) {
                        goto success;
                    }
                    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                            input, tag, &unknown_fields_stream));
                    break;
                }
            }
        }
        success:
        // @@protoc_insertion_point(parse_success:onnx.TypeProto.Tensor)
        return true;
        failure:
        // @@protoc_insertion_point(parse_failure:onnx.TypeProto.Tensor)
        return false;
#undef DO_
    }
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

    void TypeProto_Tensor::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
        // @@protoc_insertion_point(serialize_start:onnx.TypeProto.Tensor)
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void) cached_has_bits;

        cached_has_bits = _has_bits_[0];
        // optional int32 elem_type = 1;
        if (cached_has_bits & 0x00000002u) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->elem_type(), output);
        }

        // optional .onnx.TensorShapeProto shape = 2;
        if (cached_has_bits & 0x00000001u) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                    2, HasBitSetters::shape(this), output);
        }

        output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                         static_cast<int>(_internal_metadata_.unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:onnx.TypeProto.Tensor)
    }

    size_t TypeProto_Tensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.TypeProto.Tensor)
        size_t total_size = 0;

        total_size += _internal_metadata_.unknown_fields().size();

        ::google::protobuf::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void) cached_has_bits;

        cached_has_bits = _has_bits_[0];
        if (cached_has_bits & 0x00000003u) {
            // optional .onnx.TensorShapeProto shape = 2;
            if (cached_has_bits & 0x00000001u) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::MessageSize(
                                      *shape_);
            }

            // optional int32 elem_type = 1;
            if (cached_has_bits & 0x00000002u) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::Int32Size(
                                      this->elem_type());
            }

        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
        SetCachedSize(cached_size);
        return total_size;
    }

    void TypeProto_Tensor::CheckTypeAndMergeFrom(
            const ::google::protobuf::MessageLite& from) {
        MergeFrom(*::google::protobuf::down_cast<const TypeProto_Tensor*>(&from));
    }

    void TypeProto_Tensor::MergeFrom(const TypeProto_Tensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx.TypeProto.Tensor)
                GOOGLE_DCHECK_NE(&from, this);
        _internal_metadata_.MergeFrom(from._internal_metadata_);
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void) cached_has_bits;

        cached_has_bits = from._has_bits_[0];
        if (cached_has_bits & 0x00000003u) {
            if (cached_has_bits & 0x00000001u) {
                mutable_shape()->::onnx::TensorShapeProto::MergeFrom(from.shape());
            }
            if (cached_has_bits & 0x00000002u) {
                elem_type_ = from.elem_type_;
            }
            _has_bits_[0] |= cached_has_bits;
        }
    }

    void TypeProto_Tensor::CopyFrom(const TypeProto_Tensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.TypeProto.Tensor)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool TypeProto_Tensor::IsInitialized() const {
        return true;
    }

    void TypeProto_Tensor::Swap(TypeProto_Tensor* other) {
        if (other == this) return;
        InternalSwap(other);
    }
    void TypeProto_Tensor::InternalSwap(TypeProto_Tensor* other) {
        using std::swap;
        _internal_metadata_.Swap(&other->_internal_metadata_);
        swap(_has_bits_[0], other->_has_bits_[0]);
        swap(shape_, other->shape_);
        swap(elem_type_, other->elem_type_);
    }

    ::std::string TypeProto_Tensor::GetTypeName() const {
        return "onnx.TypeProto.Tensor";
    }


// ===================================================================

    void TypeProto::InitAsDefaultInstance() {
    }
    class TypeProto::HasBitSetters {
    public:
        static const ::onnx::TypeProto_Tensor& tensor_type(const TypeProto* msg);
        static void set_has_denotation(TypeProto* msg) {
            msg->_has_bits_[0] |= 0x00000001u;
        }
    };

    const ::onnx::TypeProto_Tensor&
    TypeProto::HasBitSetters::tensor_type(const TypeProto* msg) {
        return *msg->value_.tensor_type_;
    }
    void TypeProto::set_allocated_tensor_type(::onnx::TypeProto_Tensor* tensor_type) {
        ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
        clear_value();
        if (tensor_type) {
            ::google::protobuf::Arena* submessage_arena = nullptr;
            if (message_arena != submessage_arena) {
                tensor_type = ::google::protobuf::internal::GetOwnedMessage(
                        message_arena, tensor_type, submessage_arena);
            }
            set_has_tensor_type();
            value_.tensor_type_ = tensor_type;
        }
        // @@protoc_insertion_point(field_set_allocated:onnx.TypeProto.tensor_type)
    }
#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int TypeProto::kTensorTypeFieldNumber;
    const int TypeProto::kDenotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

    TypeProto::TypeProto()
            : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
        SharedCtor();
        // @@protoc_insertion_point(constructor:onnx.TypeProto)
    }
    TypeProto::TypeProto(const TypeProto& from)
            : ::google::protobuf::MessageLite(),
              _internal_metadata_(nullptr),
              _has_bits_(from._has_bits_) {
        _internal_metadata_.MergeFrom(from._internal_metadata_);
        denotation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        if (from.has_denotation()) {
            denotation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.denotation_);
        }
        clear_has_value();
        switch (from.value_case()) {
            case kTensorType: {
                mutable_tensor_type()->::onnx::TypeProto_Tensor::MergeFrom(from.tensor_type());
                break;
            }
            case VALUE_NOT_SET: {
                break;
            }
        }
        // @@protoc_insertion_point(copy_constructor:onnx.TypeProto)
    }

    void TypeProto::SharedCtor() {
        ::google::protobuf::internal::InitSCC(
                &scc_info_TypeProto_onnx_2eproto.base);
        denotation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_value();
    }

    TypeProto::~TypeProto() {
        // @@protoc_insertion_point(destructor:onnx.TypeProto)
        SharedDtor();
    }

    void TypeProto::SharedDtor() {
        denotation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        if (has_value()) {
            clear_value();
        }
    }

    void TypeProto::SetCachedSize(int size) const {
        _cached_size_.Set(size);
    }
    const TypeProto& TypeProto::default_instance() {
        ::google::protobuf::internal::InitSCC(&::scc_info_TypeProto_onnx_2eproto.base);
        return *internal_default_instance();
    }


    void TypeProto::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:onnx.TypeProto)
        switch (value_case()) {
            case kTensorType: {
                delete value_.tensor_type_;
                break;
            }
            case VALUE_NOT_SET: {
                break;
            }
        }
        _oneof_case_[0] = VALUE_NOT_SET;
    }


    void TypeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.TypeProto)
        ::google::protobuf::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void) cached_has_bits;

        cached_has_bits = _has_bits_[0];
        if (cached_has_bits & 0x00000001u) {
            denotation_.ClearNonDefaultToEmptyNoArena();
        }
        clear_value();
        _has_bits_.Clear();
        _internal_metadata_.Clear();
    }

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
    const char* TypeProto::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TypeProto*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .onnx.TypeProto.Tensor tensor_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::onnx::TypeProto_Tensor::_InternalParse;
        object = msg->mutable_tensor_type();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // optional string denotation = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        auto str = msg->mutable_denotation();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          object = str;
          str->clear();
          str->reserve(size);
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto len_delim_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(str, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
    bool TypeProto::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
                &_internal_metadata_);
        ::google::protobuf::io::StringOutputStream unknown_fields_output(
                unknown_fields_setter.buffer());
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
                &unknown_fields_output, false);
        // @@protoc_insertion_point(parse_start:onnx.TypeProto)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
            tag = p.first;
            if (!p.second) goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                // optional .onnx.TypeProto.Tensor tensor_type = 1;
                case 1: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                                input, mutable_tensor_type()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // optional string denotation = 6;
                case 6: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                                input, this->mutable_denotation()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                default: {
                    handle_unusual:
                    if (tag == 0) {
                        goto success;
                    }
                    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                            input, tag, &unknown_fields_stream));
                    break;
                }
            }
        }
        success:
        // @@protoc_insertion_point(parse_success:onnx.TypeProto)
        return true;
        failure:
        // @@protoc_insertion_point(parse_failure:onnx.TypeProto)
        return false;
#undef DO_
    }
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

    void TypeProto::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
        // @@protoc_insertion_point(serialize_start:onnx.TypeProto)
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void) cached_has_bits;

        // optional .onnx.TypeProto.Tensor tensor_type = 1;
        if (has_tensor_type()) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                    1, HasBitSetters::tensor_type(this), output);
        }

        cached_has_bits = _has_bits_[0];
        // optional string denotation = 6;
        if (cached_has_bits & 0x00000001u) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                    6, this->denotation(), output);
        }

        output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                         static_cast<int>(_internal_metadata_.unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:onnx.TypeProto)
    }

    size_t TypeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.TypeProto)
        size_t total_size = 0;

        total_size += _internal_metadata_.unknown_fields().size();

        ::google::protobuf::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void) cached_has_bits;

        // optional string denotation = 6;
        cached_has_bits = _has_bits_[0];
        if (cached_has_bits & 0x00000001u) {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                                  this->denotation());
        }

        switch (value_case()) {
            // optional .onnx.TypeProto.Tensor tensor_type = 1;
            case kTensorType: {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::MessageSize(
                                      *value_.tensor_type_);
                break;
            }
            case VALUE_NOT_SET: {
                break;
            }
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
        SetCachedSize(cached_size);
        return total_size;
    }

    void TypeProto::CheckTypeAndMergeFrom(
            const ::google::protobuf::MessageLite& from) {
        MergeFrom(*::google::protobuf::down_cast<const TypeProto*>(&from));
    }

    void TypeProto::MergeFrom(const TypeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx.TypeProto)
                GOOGLE_DCHECK_NE(&from, this);
        _internal_metadata_.MergeFrom(from._internal_metadata_);
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void) cached_has_bits;

        if (from.has_denotation()) {
            _has_bits_[0] |= 0x00000001u;
            denotation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.denotation_);
        }
        switch (from.value_case()) {
            case kTensorType: {
                mutable_tensor_type()->::onnx::TypeProto_Tensor::MergeFrom(from.tensor_type());
                break;
            }
            case VALUE_NOT_SET: {
                break;
            }
        }
    }

    void TypeProto::CopyFrom(const TypeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.TypeProto)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool TypeProto::IsInitialized() const {
        return true;
    }

    void TypeProto::Swap(TypeProto* other) {
        if (other == this) return;
        InternalSwap(other);
    }
    void TypeProto::InternalSwap(TypeProto* other) {
        using std::swap;
        _internal_metadata_.Swap(&other->_internal_metadata_);
        swap(_has_bits_[0], other->_has_bits_[0]);
        denotation_.Swap(&other->denotation_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                         GetArenaNoVirtual());
        swap(value_, other->value_);
        swap(_oneof_case_[0], other->_oneof_case_[0]);
    }

    ::std::string TypeProto::GetTypeName() const {
        return "onnx.TypeProto";
    }


// ===================================================================

    void OperatorSetIdProto::InitAsDefaultInstance() {
    }
    class OperatorSetIdProto::HasBitSetters {
    public:
        static void set_has_domain(OperatorSetIdProto* msg) {
            msg->_has_bits_[0] |= 0x00000001u;
        }
        static void set_has_version(OperatorSetIdProto* msg) {
            msg->_has_bits_[0] |= 0x00000002u;
        }
    };

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int OperatorSetIdProto::kDomainFieldNumber;
    const int OperatorSetIdProto::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

    OperatorSetIdProto::OperatorSetIdProto()
            : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
        SharedCtor();
        // @@protoc_insertion_point(constructor:onnx.OperatorSetIdProto)
    }
    OperatorSetIdProto::OperatorSetIdProto(const OperatorSetIdProto& from)
            : ::google::protobuf::MessageLite(),
              _internal_metadata_(nullptr),
              _has_bits_(from._has_bits_) {
        _internal_metadata_.MergeFrom(from._internal_metadata_);
        domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        if (from.has_domain()) {
            domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
        }
        version_ = from.version_;
        // @@protoc_insertion_point(copy_constructor:onnx.OperatorSetIdProto)
    }

    void OperatorSetIdProto::SharedCtor() {
        ::google::protobuf::internal::InitSCC(
                &scc_info_OperatorSetIdProto_onnx_2eproto.base);
        domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        version_ = PROTOBUF_LONGLONG(0);
    }

    OperatorSetIdProto::~OperatorSetIdProto() {
        // @@protoc_insertion_point(destructor:onnx.OperatorSetIdProto)
        SharedDtor();
    }

    void OperatorSetIdProto::SharedDtor() {
        domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    void OperatorSetIdProto::SetCachedSize(int size) const {
        _cached_size_.Set(size);
    }
    const OperatorSetIdProto& OperatorSetIdProto::default_instance() {
        ::google::protobuf::internal::InitSCC(&::scc_info_OperatorSetIdProto_onnx_2eproto.base);
        return *internal_default_instance();
    }


    void OperatorSetIdProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.OperatorSetIdProto)
        ::google::protobuf::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void) cached_has_bits;

        cached_has_bits = _has_bits_[0];
        if (cached_has_bits & 0x00000001u) {
            domain_.ClearNonDefaultToEmptyNoArena();
        }
        version_ = PROTOBUF_LONGLONG(0);
        _has_bits_.Clear();
        _internal_metadata_.Clear();
    }

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
    const char* OperatorSetIdProto::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OperatorSetIdProto*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string domain = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        auto str = msg->mutable_domain();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          object = str;
          str->clear();
          str->reserve(size);
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto len_delim_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(str, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int64 version = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = ::google::protobuf::io::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_version(value);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
    bool OperatorSetIdProto::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
                &_internal_metadata_);
        ::google::protobuf::io::StringOutputStream unknown_fields_output(
                unknown_fields_setter.buffer());
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
                &unknown_fields_output, false);
        // @@protoc_insertion_point(parse_start:onnx.OperatorSetIdProto)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
            tag = p.first;
            if (!p.second) goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                // optional string domain = 1;
                case 1: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                                input, this->mutable_domain()));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                    // optional int64 version = 2;
                case 2: {
                    if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
                        HasBitSetters::set_has_version(this);
                        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                                input, &version_)));
                    } else {
                        goto handle_unusual;
                    }
                    break;
                }

                default: {
                    handle_unusual:
                    if (tag == 0) {
                        goto success;
                    }
                    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                            input, tag, &unknown_fields_stream));
                    break;
                }
            }
        }
        success:
        // @@protoc_insertion_point(parse_success:onnx.OperatorSetIdProto)
        return true;
        failure:
        // @@protoc_insertion_point(parse_failure:onnx.OperatorSetIdProto)
        return false;
#undef DO_
    }
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

    void OperatorSetIdProto::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
        // @@protoc_insertion_point(serialize_start:onnx.OperatorSetIdProto)
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void) cached_has_bits;

        cached_has_bits = _has_bits_[0];
        // optional string domain = 1;
        if (cached_has_bits & 0x00000001u) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                    1, this->domain(), output);
        }

        // optional int64 version = 2;
        if (cached_has_bits & 0x00000002u) {
            ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->version(), output);
        }

        output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                         static_cast<int>(_internal_metadata_.unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:onnx.OperatorSetIdProto)
    }

    size_t OperatorSetIdProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.OperatorSetIdProto)
        size_t total_size = 0;

        total_size += _internal_metadata_.unknown_fields().size();

        ::google::protobuf::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void) cached_has_bits;

        cached_has_bits = _has_bits_[0];
        if (cached_has_bits & 0x00000003u) {
            // optional string domain = 1;
            if (cached_has_bits & 0x00000001u) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->domain());
            }

            // optional int64 version = 2;
            if (cached_has_bits & 0x00000002u) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::Int64Size(
                                      this->version());
            }

        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
        SetCachedSize(cached_size);
        return total_size;
    }

    void OperatorSetIdProto::CheckTypeAndMergeFrom(
            const ::google::protobuf::MessageLite& from) {
        MergeFrom(*::google::protobuf::down_cast<const OperatorSetIdProto*>(&from));
    }

    void OperatorSetIdProto::MergeFrom(const OperatorSetIdProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx.OperatorSetIdProto)
                GOOGLE_DCHECK_NE(&from, this);
        _internal_metadata_.MergeFrom(from._internal_metadata_);
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void) cached_has_bits;

        cached_has_bits = from._has_bits_[0];
        if (cached_has_bits & 0x00000003u) {
            if (cached_has_bits & 0x00000001u) {
                _has_bits_[0] |= 0x00000001u;
                domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
            }
            if (cached_has_bits & 0x00000002u) {
                version_ = from.version_;
            }
            _has_bits_[0] |= cached_has_bits;
        }
    }

    void OperatorSetIdProto::CopyFrom(const OperatorSetIdProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.OperatorSetIdProto)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool OperatorSetIdProto::IsInitialized() const {
        return true;
    }

    void OperatorSetIdProto::Swap(OperatorSetIdProto* other) {
        if (other == this) return;
        InternalSwap(other);
    }
    void OperatorSetIdProto::InternalSwap(OperatorSetIdProto* other) {
        using std::swap;
        _internal_metadata_.Swap(&other->_internal_metadata_);
        swap(_has_bits_[0], other->_has_bits_[0]);
        domain_.Swap(&other->domain_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                     GetArenaNoVirtual());
        swap(version_, other->version_);
    }

    ::std::string OperatorSetIdProto::GetTypeName() const {
        return "onnx.OperatorSetIdProto";
    }


// @@protoc_insertion_point(namespace_scope)
}  // namespace onnx
namespace google {
    namespace protobuf {
        template<> PROTOBUF_NOINLINE ::onnx::AttributeProto* Arena::CreateMaybeMessage< ::onnx::AttributeProto >(Arena* arena) {
            return Arena::CreateInternal< ::onnx::AttributeProto >(arena);
        }
        template<> PROTOBUF_NOINLINE ::onnx::ValueInfoProto* Arena::CreateMaybeMessage< ::onnx::ValueInfoProto >(Arena* arena) {
            return Arena::CreateInternal< ::onnx::ValueInfoProto >(arena);
        }
        template<> PROTOBUF_NOINLINE ::onnx::NodeProto* Arena::CreateMaybeMessage< ::onnx::NodeProto >(Arena* arena) {
            return Arena::CreateInternal< ::onnx::NodeProto >(arena);
        }
        template<> PROTOBUF_NOINLINE ::onnx::ModelProto* Arena::CreateMaybeMessage< ::onnx::ModelProto >(Arena* arena) {
            return Arena::CreateInternal< ::onnx::ModelProto >(arena);
        }
        template<> PROTOBUF_NOINLINE ::onnx::StringStringEntryProto* Arena::CreateMaybeMessage< ::onnx::StringStringEntryProto >(Arena* arena) {
            return Arena::CreateInternal< ::onnx::StringStringEntryProto >(arena);
        }
        template<> PROTOBUF_NOINLINE ::onnx::GraphProto* Arena::CreateMaybeMessage< ::onnx::GraphProto >(Arena* arena) {
            return Arena::CreateInternal< ::onnx::GraphProto >(arena);
        }
        template<> PROTOBUF_NOINLINE ::onnx::TensorProto_Segment* Arena::CreateMaybeMessage< ::onnx::TensorProto_Segment >(Arena* arena) {
            return Arena::CreateInternal< ::onnx::TensorProto_Segment >(arena);
        }
        template<> PROTOBUF_NOINLINE ::onnx::TensorProto* Arena::CreateMaybeMessage< ::onnx::TensorProto >(Arena* arena) {
            return Arena::CreateInternal< ::onnx::TensorProto >(arena);
        }
        template<> PROTOBUF_NOINLINE ::onnx::TensorShapeProto_Dimension* Arena::CreateMaybeMessage< ::onnx::TensorShapeProto_Dimension >(Arena* arena) {
            return Arena::CreateInternal< ::onnx::TensorShapeProto_Dimension >(arena);
        }
        template<> PROTOBUF_NOINLINE ::onnx::TensorShapeProto* Arena::CreateMaybeMessage< ::onnx::TensorShapeProto >(Arena* arena) {
            return Arena::CreateInternal< ::onnx::TensorShapeProto >(arena);
        }
        template<> PROTOBUF_NOINLINE ::onnx::TypeProto_Tensor* Arena::CreateMaybeMessage< ::onnx::TypeProto_Tensor >(Arena* arena) {
            return Arena::CreateInternal< ::onnx::TypeProto_Tensor >(arena);
        }
        template<> PROTOBUF_NOINLINE ::onnx::TypeProto* Arena::CreateMaybeMessage< ::onnx::TypeProto >(Arena* arena) {
            return Arena::CreateInternal< ::onnx::TypeProto >(arena);
        }
        template<> PROTOBUF_NOINLINE ::onnx::OperatorSetIdProto* Arena::CreateMaybeMessage< ::onnx::OperatorSetIdProto >(Arena* arena) {
            return Arena::CreateInternal< ::onnx::OperatorSetIdProto >(arena);
        }
    }  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>